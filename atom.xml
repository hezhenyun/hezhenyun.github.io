<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>浮生醉清风</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-22T04:41:33.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>何阵运(HE)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python2.x与3​​.x版本区别</title>
    <link href="http://yoursite.com/2019/11/22/python%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/11/22/python%E7%89%88%E6%9C%AC/</id>
    <published>2019-11-22T04:37:57.548Z</published>
    <updated>2019-11-22T04:41:33.153Z</updated>
    
    <content type="html"><![CDATA[<p>Python的3​​.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。</p><p>为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下相容。</p><p>许多针对早期Python版本设计的程式都无法在Python 3.0上正常执行。</p><p>为了照顾现有程式，Python 2.6作为一个过渡版本，基本使用了Python 2.x的语法和库，同时考虑了向Python 3.0的迁移，允许使用部分Python 3.0的语法与函数。</p><p>新的Python程式建议使用Python 3.0版本的语法。</p><p>除非执行环境无法安装Python 3.0或者程式本身使用了不支援Python 3.0的第三方库。目前不支援Python 3.0的第三方库有Twisted, py2exe, PIL等。</p><p>大多数第三方库都正在努力地相容Python 3.0版本。即使无法立即使用Python 3.0，也建议编写相容Python 3.0版本的程式，然后使用Python 2.6, Python 2.7来执行。</p><p>Python 3.0的变化主要在以下几个方面:</p><h2 id="print-函数"><a href="#print-函数" class="headerlink" title="print 函数"></a>print 函数</h2><p>print语句没有了，取而代之的是print()函数。 Python 2.6与Python 2.7部分地支持这种形式的print语法。在Python 2.6与Python 2.7里面，以下三种形式是等价的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span> <span class="string">"fish"</span></span><br><span class="line">$ <span class="built_in">print</span> (<span class="string">"fish"</span>) <span class="comment">#注意print后面有个空格</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="string">"fish"</span>) <span class="comment">#print()不能带有任何其它参数</span></span><br></pre></td></tr></table></figure><p>然而，Python 2.6实际已经支持新的print()语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ from __future__ import print_function</span><br><span class="line">$ <span class="built_in">print</span>(<span class="string">"fish"</span>, <span class="string">"panda"</span>, sep=<span class="string">', '</span>)</span><br></pre></td></tr></table></figure><h2 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h2><p>Python中的除法较其它语言显得非常高端，有套很复杂的规则。Python中的除法有两个运算符，/和//</p><p>首先来说/除法:</p><p>在python 2.x中/除法就跟我们熟悉的大多数语言，比如Java啊C啊差不多，整数相除的结果是一个整数，把小数部分完全忽略掉，浮点数除法会保留小数点的部分得到一个浮点数的结果。</p><p>在python 3.x中/除法不再这么做了，对于整数之间的相除，结果也会是浮点数。</p><h3 id="Python-2-x"><a href="#Python-2-x" class="headerlink" title="Python 2.x:"></a>Python 2.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; 1 / 2</span><br><span class="line">$ 0</span><br><span class="line">$ &gt;&gt;&gt; 1.0 / 2.0</span><br><span class="line">$ 0.5</span><br></pre></td></tr></table></figure><h3 id="Python-3-x"><a href="#Python-3-x" class="headerlink" title="Python 3.x:"></a>Python 3.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; 1/2</span><br><span class="line">$ 0.5</span><br></pre></td></tr></table></figure><p>而对于//除法，这种除法叫做floor除法，会对除法的结果自动进行一个floor操作，在python 2.x和python 3.x中是一致的。</p><h3 id="python-2-x"><a href="#python-2-x" class="headerlink" title="python 2.x:"></a>python 2.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; -1 // 2</span><br><span class="line">$ -1</span><br></pre></td></tr></table></figure><h3 id="python-3-x"><a href="#python-3-x" class="headerlink" title="python 3.x:"></a>python 3.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; -1 // 2</span><br><span class="line">$ -1</span><br></pre></td></tr></table></figure><p>注意的是并不是舍弃小数部分，而是执行 floor 操作，如果要截取整数部分，那么需要使用 math 模块的 trunc 函数</p><h3 id="python-3-x-1"><a href="#python-3-x-1" class="headerlink" title="python 3.x:"></a>python 3.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; import math</span><br><span class="line">$ &gt;&gt;&gt; math.trunc(1 / 2)</span><br><span class="line">$ 0</span><br><span class="line">$ &gt;&gt;&gt; math.trunc(-1 / 2)</span><br><span class="line">$ 0</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。</p><p>捕获异常的语法由 except exc, var 改为 except exc as var。</p><p>使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python 2.6已经支持这两种语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ 1.在2.x时代，所有类型的对象都是可以被直接抛出的，在3.x时代，只有继承自BaseException的对象才可以被抛出。</span><br><span class="line">$ 2.2.xraise语句使用逗号将抛出对象类型和参数分开，3.x取消了这种奇葩的写法，直接调用构造函数抛出对象即可。</span><br></pre></td></tr></table></figure><p>在2.x时代，异常在代码中除了表示程序错误，还经常做一些普通控制结构应该做的事情，在3.x中可以看出，设计者让异常变的更加专一，只有在错误发生的情况才能去用异常捕获语句来处理。</p><h2 id="xrange"><a href="#xrange" class="headerlink" title="xrange"></a>xrange</h2><p>在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。</p><p>这个表现十分像生成器（比如。”惰性求值”）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。</p><p>由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for 循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。</p><p>在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中 xrange() 会抛出命名异常）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import timeit</span><br><span class="line"></span><br><span class="line">n = 10000</span><br><span class="line">def test_range(n):</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">def test_xrange(n):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h3 id="Python-2"><a href="#Python-2" class="headerlink" title="Python 2"></a>Python 2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">'Python'</span>, python_version()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">'\ntiming range()'</span> </span><br><span class="line">%timeit test_range(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">'\n\ntiming xrange()'</span> </span><br><span class="line">%timeit test_xrange(n)</span><br><span class="line"></span><br><span class="line">Python 2.7.6</span><br><span class="line"></span><br><span class="line">timing range()</span><br><span class="line">1000 loops, best of 3: 433 µs per loop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timing xrange()</span><br><span class="line">1000 loops, best of 3: 350 µs per loop</span><br></pre></td></tr></table></figure><h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'Python'</span>, python_version())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'\ntiming range()'</span>)</span><br><span class="line">%timeit test_range(n)</span><br><span class="line"></span><br><span class="line">Python 3.4.1</span><br><span class="line"></span><br><span class="line">timing range()</span><br><span class="line">1000 loops, best of 3: 520 µs per loop</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(xrange(10))</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-5-5d8f9b79ea70&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 <span class="built_in">print</span>(xrange(10))</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'xrange'</span> is not defined</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>菜鸟教程<br><a href="https://www.runoob.com/python/python-2x-3x.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-2x-3x.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python的3​​.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。&lt;/p&gt;
&lt;p&gt;为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下相容。&lt;/p&gt;
&lt;p&gt;许多针对早期Python版本设计的程式都无
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python爬虫基本原理</title>
    <link href="http://yoursite.com/2019/11/20/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/20/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</id>
    <published>2019-11-20T13:40:50.584Z</published>
    <updated>2019-11-20T13:44:50.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是爬虫"><a href="#一、什么是爬虫" class="headerlink" title="一、什么是爬虫"></a>一、什么是爬虫</h2><p>互联网比喻成一张网，每张网上的节点就是数据存储的地方；Python程序类似蜘蛛，到每个节点中抓取自己的猎物；爬虫是指：给网站发送请求，获取资源后解析并提取有用数据的程序</p><h2 id="二、爬虫的执行流程"><a href="#二、爬虫的执行流程" class="headerlink" title="二、爬虫的执行流程"></a>二、爬虫的执行流程</h2><p>发送请求，获得数据（以图片，视频，js，css的形式），解析数据，存入数据库或文件中</p><h3 id="爬虫执行流程"><a href="#爬虫执行流程" class="headerlink" title="爬虫执行流程"></a>爬虫执行流程</h3><h3 id="1、发送请求request"><a href="#1、发送请求request" class="headerlink" title="1、发送请求request"></a>1、发送请求request</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用http库向目标站点发起请求，即发送一个Request</span><br><span class="line"></span><br><span class="line">Request包含：请求头、请求体等 </span><br><span class="line"></span><br><span class="line">Request模块缺陷：不能执行JS 和CSS 代码</span><br></pre></td></tr></table></figure><h3 id="2、获取响应内容-response"><a href="#2、获取响应内容-response" class="headerlink" title="2、获取响应内容 response"></a>2、获取响应内容 response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果服务器能正常响应，则会得到一个Response</span><br><span class="line"></span><br><span class="line">Response包含：html，json，图片，视频等</span><br></pre></td></tr></table></figure><h3 id="3、解析内容"><a href="#3、解析内容" class="headerlink" title="3、解析内容"></a>3、解析内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">解析html数据：正则表达式（RE模块），第三方解析库如Beautifulsoup，pyquery等</span><br><span class="line"></span><br><span class="line">解析json数据：json模块</span><br><span class="line"></span><br><span class="line">解析二进制数据:以wb的方式写入文件</span><br><span class="line"></span><br><span class="line">请求头需要注意的参数：</span><br><span class="line"></span><br><span class="line">（1）Referrer：访问源至哪里来（一些大型网站，会通过Referrer 做防盗链策略；所有爬虫也要注意模拟）</span><br><span class="line"></span><br><span class="line">（2）User-Agent:访问的浏览器（要加上否则会被当成爬虫程序）</span><br><span class="line"></span><br><span class="line">（3）cookie：请求头注意携带</span><br></pre></td></tr></table></figure><h3 id="4、请求体"><a href="#4、请求体" class="headerlink" title="4、请求体"></a>4、请求体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请求体</span><br><span class="line"></span><br><span class="line">如果是get方式，请求体没有内容（get请求的请求体放在 url后面参数中，直接能看到）</span><br><span class="line"></span><br><span class="line">如果是post方式，请求体是format data</span><br><span class="line"></span><br><span class="line">    ps：</span><br><span class="line"></span><br><span class="line">    1、登录窗口，文件上传等，信息都会被附加到请求体内</span><br><span class="line"></span><br><span class="line">2、登录，输入错误的用户名密码，然后提交，就可以看到post，正确登录后页面通常会跳转，无法捕捉到post</span><br></pre></td></tr></table></figure><h3 id="五、响应Response"><a href="#五、响应Response" class="headerlink" title="五、响应Response"></a>五、响应Response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、响应状态码</span><br><span class="line"></span><br><span class="line">　　200：代表成功</span><br><span class="line"></span><br><span class="line">　　301：代表跳转</span><br><span class="line"></span><br><span class="line">　　404：文件不存在</span><br><span class="line"></span><br><span class="line">　　403：无权限访问</span><br><span class="line"></span><br><span class="line">　　502：服务器错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、respone header</span><br><span class="line"></span><br><span class="line">响应头需要注意的参数：</span><br><span class="line"></span><br><span class="line">（1）Set-Cookie:BDSVRTM=0; path=/：可能有多个，是来告诉浏览器，把cookie保存下来</span><br><span class="line"></span><br><span class="line">（2）Content-Location：服务端响应头中包含Location返回浏览器之后，浏览器就会重新访问另一个页面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、preview就是网页源代码</span><br><span class="line"></span><br><span class="line">JSO数据</span><br><span class="line"></span><br><span class="line">如网页html，图片</span><br><span class="line"></span><br><span class="line">二进制数据等</span><br></pre></td></tr></table></figure><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、总结爬虫流程：</span><br><span class="line"></span><br><span class="line"> 爬取---&gt;解析---&gt;存储</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、爬虫所需工具：</span><br><span class="line"></span><br><span class="line">请求库：requests,selenium（可以驱动浏览器解析渲染CSS和JS，但有性能劣势（有用没用的网页都会加载）；） </span><br><span class="line"></span><br><span class="line">解析库：正则，beautifulsoup，pyquery </span><br><span class="line"></span><br><span class="line">存储库：文件，MySQL，Mongodb，Redis</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>作者：热心市民小蔡<br>链接：<a href="https://www.jianshu.com/p/2411490d6464" target="_blank" rel="noopener">https://www.jianshu.com/p/2411490d6464</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是爬虫&quot;&gt;&lt;a href=&quot;#一、什么是爬虫&quot; class=&quot;headerlink&quot; title=&quot;一、什么是爬虫&quot;&gt;&lt;/a&gt;一、什么是爬虫&lt;/h2&gt;&lt;p&gt;互联网比喻成一张网，每张网上的节点就是数据存储的地方；Python程序类似蜘蛛，到每个节点中抓取自己
      
    
    </summary>
    
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式之python系列</title>
    <link href="http://yoursite.com/2019/11/18/python%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2019/11/18/python%E6%AD%A3%E5%88%99/</id>
    <published>2019-11-18T06:42:51.232Z</published>
    <updated>2019-11-21T01:12:24.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式的定义"><a href="#正则表达式的定义" class="headerlink" title="正则表达式的定义"></a>正则表达式的定义</h2><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。<br>10000 ~ 12数字组合<br>09876536</p><ol><li>长度</li><li>是否是0开头</li></ol><p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。</p><p>正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p>Regular Expression的“Regular”一般被译为“正则”、“正规”、“常规”。此处的“Regular”即是“规则”、“规律”的意思，Regular Expression即“描述某种规则的表达式”之意。<br>正则在所有语言中都有的内容。</p><h2 id="正则表达式的作用和特点"><a href="#正则表达式的作用和特点" class="headerlink" title="正则表达式的作用和特点"></a>正则表达式的作用和特点</h2><h3 id="给定一个正则表达式和另一个字符串，我们可以达到如下的目的："><a href="#给定一个正则表达式和另一个字符串，我们可以达到如下的目的：" class="headerlink" title="给定一个正则表达式和另一个字符串，我们可以达到如下的目的："></a>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</h3><ol><li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li></ol><h3 id="正则表达式的特点是："><a href="#正则表达式的特点是：" class="headerlink" title="正则表达式的特点是："></a>正则表达式的特点是：</h3><ol><li>灵活性、逻辑性和功能性非常强；</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。</li></ol><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>如何判断一个字符串是手机号呢？</p><p>判断邮箱为163或者126的所有邮件地址</p><p>假如你在写一个爬虫，你得到了一个网页的HTML源码。其中有一段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">你想要把这个hello world提取出来，但你这时如果只会python 的字符串处理，那么第一反应可能是</span><br><span class="line"></span><br><span class="line">$  s = <span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span></span><br><span class="line">$  start_index = s.find(<span class="string">'&lt;h1&gt;'</span>)</span><br></pre></td></tr></table></figure><h2 id="python-re模块："><a href="#python-re模块：" class="headerlink" title="python re模块："></a>python re模块：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\A：表示从字符串的开始处匹配</span><br><span class="line">\Z：表示从字符串的结束处匹配，如果存在换行，只匹配到换行前的结束字符串。</span><br><span class="line">\b：匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class="string">'py\b'</span> 可以匹配<span class="string">"python"</span> 中的 <span class="string">'py'</span>，但不能匹配 <span class="string">"openpyxl"</span> 中的 <span class="string">'py'</span>。</span><br><span class="line">\B：匹配非单词边界。 <span class="string">'py\b'</span> 可以匹配<span class="string">"openpyxl"</span> 中的 <span class="string">'py'</span>，但不能匹配<span class="string">"python"</span> 中的 <span class="string">'py'</span>。</span><br><span class="line">\d：匹配任意数字，等价于 [0-9]。  digit</span><br><span class="line">\D：匹配任意非数字字符，等价于 [^\d]。not digit</span><br><span class="line">\s：匹配任意空白字符，等价于 [\t\n\r\f]。 space</span><br><span class="line">\S：匹配任意非空白字符，等价于 [^\s]。</span><br><span class="line">\w：匹配任意字母数字及下划线，等价于[a-zA-Z0-9_]。</span><br><span class="line">\W：匹配任意非字母数字及下划线，等价于[^\w]</span><br><span class="line">\\：匹配原义的反斜杠\。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">‘.’用于匹配除换行符（\n）之外的所有字符。</span><br><span class="line">‘^’用于匹配字符串的开始，即行首。</span><br><span class="line">‘$’用于匹配字符串的末尾（末尾如果有换行符\n，就匹配\n前面的那个字符），即行尾。</span><br></pre></td></tr></table></figure><h3 id="定义正则验证次数："><a href="#定义正则验证次数：" class="headerlink" title="定义正则验证次数："></a>定义正则验证次数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">‘*’用于将前面的模式匹配0次或多次（贪婪模式，即尽可能多的匹配） &gt;=0</span><br><span class="line">‘+’用于将前面的模式匹配1次或多次（贪婪模式） &gt;=1    ‘？’用于将前面的模式匹配0次或1次（贪婪模式） 0 ，1</span><br><span class="line"><span class="string">'&#123;m&#125;'</span>  用于验证将前面的模式匹配m次</span><br><span class="line"><span class="string">'&#123;m,&#125;'</span>用于验证将前面的模式匹配m次或者多次  &gt;=m</span><br><span class="line"><span class="string">'&#123;m,n&#125;'</span>   用于验证将前面的模式匹配大于等于m次并且小于等于n次</span><br><span class="line"></span><br><span class="line">    ‘*？，+？，？？’即上面三种特殊字符的非贪婪模式（尽可能少的匹配）。</span><br><span class="line">    ‘&#123;m,n&#125;’用于将前面的模式匹配m次到n次（贪婪模式），即最小匹配m次，最大匹配n次。</span><br><span class="line">    ‘&#123;m,n&#125;？’即上面‘&#123;m,n&#125;’的非贪婪版本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">‘\\’：<span class="string">'\'</span>是转义字符，在特殊字符前面加上\，特殊字符就失去了其所代表的含义，比如\+就仅仅代表加号+本身。</span><br><span class="line">‘[]’用于标示一组字符，如果^是第一个字符，则标示的是一个补集。比如[0-9]表示所有的数字，[^0-9]表示除了数字外的字符。</span><br><span class="line">‘|’比如A|B用于匹配A或B。</span><br><span class="line">‘(...)’用于匹配括号中的模式，可以在字符串中检索或匹配我们所需要的内容。</span><br></pre></td></tr></table></figure><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪则相反，总是尝试匹配尽可能少的字符。</p><p>在”*”,”?”,”+”,”{m,n}”后面加上？，使贪婪变成非贪婪。</p><h2 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h2><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><h3 id="函数语法："><a href="#函数语法：" class="headerlink" title="函数语法："></a>函数语法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ re.match(pattern, string, flags=0)</span><br></pre></td></tr></table></figure><h3 id="函数参数说明"><a href="#函数参数说明" class="headerlink" title="函数参数说明"></a>函数参数说明</h3><p>：<br><strong>参数    描述</strong></p><p>pattern    匹配的正则表达式<br>string    要匹配的字符串。<br>flags    标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：正则表达式修饰符 - 可选标志<br>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p><p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><p><strong>匹配对象方法    描述</strong></p><p>group(num=0)    匹配的整个表达式的字符串，<br>group()   可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。<br>groups()    返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p><h2 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p><h3 id="函数语法：-1"><a href="#函数语法：-1" class="headerlink" title="函数语法："></a>函数语法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ re.search(pattern, string, flags=0)</span><br></pre></td></tr></table></figure><h3 id="函数参数说明："><a href="#函数参数说明：" class="headerlink" title="函数参数说明："></a>函数参数说明：</h3><p><strong>参数    描述</strong></p><p>pattern    匹配的正则表达式<br>string    要匹配的字符串。<br>flags    标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。<br>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p><p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><p><strong>匹配对象方法    描述</strong></p><p>group(num=0)    匹配的整个表达式的字符串，<br>group()  可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。<br>groups()    返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p><h2 id="re-match与re-search的区别"><a href="#re-match与re-search的区别" class="headerlink" title="re.match与re.search的区别"></a>re.match与re.search的区别</h2><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p><h2 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h2><p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ re.sub(pattern, repl, string, count=0, flags=0)</span><br></pre></td></tr></table></figure><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern : 正则中的模式字符串。</span><br><span class="line">repl : 替换的字符串，也可为一个函数。</span><br><span class="line">string : 要被查找替换的原始字符串。</span><br><span class="line">count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</span><br></pre></td></tr></table></figure><h2 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h2><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><p>注意： match 和 search 是匹配一次 findall 匹配所有。</p><h3 id="语法格式为："><a href="#语法格式为：" class="headerlink" title="语法格式为："></a>语法格式为：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure><p>###参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string : 待匹配的字符串。</span><br><span class="line">pos : 可选参数，指定字符串的起始位置，默认为 0。</span><br><span class="line">endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</span><br></pre></td></tr></table></figure><h2 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h2><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit=0, flags=0])</span><br></pre></td></tr></table></figure><h3 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h3><p><strong>参数    描述</strong></p><p>pattern     匹配的正则表达式<br>string     要匹配的字符串。<br>maxsplit    分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。<br>flags    标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：正则表达式修饰符 - 可选标志</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本篇文章仅阐述正则表达式的一些理论知识，便于记忆<br>若想要查看正则实例请于此地址浏览<a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-reg-expressions.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式的定义&quot;&gt;&lt;a href=&quot;#正则表达式的定义&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的定义&quot;&gt;&lt;/a&gt;正则表达式的定义&lt;/h2&gt;&lt;p&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合
      
    
    </summary>
    
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+github搭建免费博客教程</title>
    <link href="http://yoursite.com/2019/11/16/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/11/16/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2019-11-16T07:52:31.118Z</published>
    <updated>2019-11-21T01:13:37.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>使用github pages服务搭建博客的好处有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ 全是静态文件，访问速度快；</span><br><span class="line">$ 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">$ 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line">$ 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">$ 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">$ 等等；</span><br></pre></td></tr></table></figure><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1.准备工作"></a>1.1.准备工作</h3><p>在开始一切之前，你必须已经：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 有一个github账号，没有的话去注册一个；</span><br><span class="line">$ 安装了node.js、npm，并了解相关基础知识；</span><br><span class="line">$ 安装了git <span class="keyword">for</span> windows（或者其它git客户端）</span><br></pre></td></tr></table></figure><h2 id="2-搭建github博客"><a href="#2-搭建github博客" class="headerlink" title="2.搭建github博客"></a>2.搭建github博客</h2><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1.创建仓库"></a>2.1.创建仓库</h3><p>新建一个名为”你的用户名.github.io”的仓库，比如说，如果你的github用户名是test，那么你就新建”test.github.io”的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？<br>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 注册的邮箱一定要验证，否则不会成功；</span><br><span class="line">$ 仓库名字必须是：username.github.io，其中username是你的用户名；</span><br><span class="line">$ 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</span><br></pre></td></tr></table></figure><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><h2 id="3-配置SSH-Key"><a href="#3-配置SSH-Key" class="headerlink" title="3.配置SSH Key"></a>3.配置SSH Key</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址"</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到”.ssh\id_rsa.pub”文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="3-1-测试是否成功"><a href="#3-1-测试是否成功" class="headerlink" title="3.1.测试是否成功"></a>3.1.测试是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi liuxianan! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"liuxianan"</span>// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  <span class="string">"xxx@qq.com"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>具体这个配置是干嘛的我没仔细深究。</p><h2 id="4-hexo的使用和注意事项"><a href="#4-hexo的使用和注意事项" class="headerlink" title="4.hexo的使用和注意事项"></a>4.hexo的使用和注意事项</h2><h3 id="4-1-hexo简介"><a href="#4-1-hexo简介" class="headerlink" title="4.1.hexo简介"></a>4.1.hexo简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h3 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2.原理"></a>4.2.原理</h3><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h3 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3.注意事项"></a>4.3.注意事项</h3><p>安装之前先来说几个注意事项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ 很多命令既可以用Windows的cmd来完成，也可以使用git  </span><br><span class="line">$ bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</span><br><span class="line"><span class="variable">$hexo</span>不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</span><br><span class="line">hexo有2种<span class="string">"_config.yml"</span>文件，一个是根目录下的全局的<span class="string">"_config.yml"</span>，一个是各个theme下的；</span><br></pre></td></tr></table></figure><h3 id="4-4-安装"><a href="#4-4-安装" class="headerlink" title="4.4.安装"></a>4.4.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="4-5-初始化"><a href="#4-5-初始化" class="headerlink" title="4.5.初始化"></a>4.5.初始化</h3><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是”F:\Workspaces\hexo”，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了</p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑</p><h3 id="4-6-上传之前"><a href="#4-6-上传之前" class="headerlink" title="4.6.上传之前"></a>4.6.上传之前</h3><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h3 id="4-7-上传到github"><a href="#4-7-上传到github" class="headerlink" title="4.7.上传到github"></a>4.7.上传到github</h3><p>如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，”ssh key”肯定要配置好。</p><p>其次，配置”_config.yml”中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: github</span><br><span class="line">  repository: https://github.com/liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="4-8-常用hexo命令"><a href="#4-8-常用hexo命令" class="headerlink" title="4.8.常用hexo命令"></a>4.8.常用hexo命令</h3><p>   常见命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><p>   缩写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>   组合命令</p><pre><code class="bash">hexo s -g <span class="comment">#生成并本地预览</span>hexo d -g <span class="comment">#生成并上传</span></code></pre><h2 id="5-最终效果"><a href="#5-最终效果" class="headerlink" title="5.最终效果"></a>5.最终效果</h2><p>可以访问我的git博客来查看效果：<a href="https://hezhenyun.github.io/" target="_blank" rel="noopener">https://hezhenyun.github.io/</a></p><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h2><p>博客园：<a href="http://www.cnblogs.com/liuxianan" target="_blank" rel="noopener">http://www.cnblogs.com/liuxianan</a><br>copyright ©2012-2018 小茗同学</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;使用github pages服务搭建博客的好处有：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令基础</title>
    <link href="http://yoursite.com/2019/11/16/Linux%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/11/16/Linux%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/</id>
    <published>2019-11-16T07:52:26.859Z</published>
    <updated>2019-11-21T01:13:13.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>1 熟悉在Linux操作系统下的基本操作，对Linux操作系统有一个感性认识<br>2 参阅相关Linux的命令参考手册，熟悉Linux下的操作命令。</p><h2 id="1-常用命令基础"><a href="#1-常用命令基础" class="headerlink" title="1.常用命令基础"></a>1.常用命令基础</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ 登录系统：login 用户名称</span><br><span class="line">$ 注销（退出）系统：<span class="built_in">logout</span> </span><br><span class="line">$ 关机命令：shutdown now</span><br><span class="line">$ 使用man命令帮助，例如：man ls（屏幕显示关于ls命令的帮助信息）</span><br><span class="line">$ ls（显示目录内容）</span><br><span class="line">格式：ls  [选项] [目录或是文件]</span><br><span class="line">其中：-a  显示指定目录下所有子目录和文件，包括隐藏文件-l   以长格式来显示文件的详细信息。</span><br><span class="line">-R  递归地显示指定目录的各个子目录中的文件</span><br><span class="line">例如：</span><br><span class="line">使用ls 查看当前目录内容：  $ ls</span><br><span class="line">使用ls 查看指定目录内容： $ ls /etc </span><br><span class="line">使用ls  –al 查看当前目录内容：   <span class="variable">$ls</span> -al</span><br><span class="line">使用dir 查看当前目录内容：  <span class="variable">$dir</span></span><br><span class="line">$ <span class="built_in">cd</span> （改变工作目录）</span><br><span class="line">格式： <span class="built_in">cd</span>   [路径名称]</span><br><span class="line">如：<span class="built_in">cd</span>  ..   回到上层目录  ；<span class="built_in">cd</span>  /   回到根目录</span><br><span class="line">$ <span class="built_in">pwd</span>  （显示当前工作目录的绝对路径）</span><br><span class="line">格式： <span class="built_in">pwd</span> </span><br><span class="line">$ mkdir （创建目录）</span><br><span class="line">格式：mkdir  [目录名称] </span><br><span class="line">例如：  mkdir  /home/s2001/newdir </span><br><span class="line">$ rmdir （删除空目录）</span><br><span class="line">格式：rmdir [选项]  [目录名称]</span><br><span class="line">$ cp （文件或目录的复制） </span><br><span class="line">格式：cp  [选项] 源文件或目录  目标文件或目录</span><br><span class="line">例如： cp  文件名1  文件名2</span><br><span class="line">$ mv  （文件或目录更名或将文件由一个目录移到另一个目录中）</span><br><span class="line">格式：mv  [选项] 源文件或目录 目标文件或目录</span><br><span class="line">$ rm （删除文件或目录）</span><br><span class="line">格式：rm  [选项] 文件名|目录名</span><br><span class="line">$ cat  （显示文件）</span><br><span class="line">格式：cat  [选项] 文件列表</span><br><span class="line">例如：cat 文件名   </span><br><span class="line">$ cat命令也可用来建立新文件：cat &gt;文件名，ctrl+d结束输入</span><br></pre></td></tr></table></figure><h2 id="2-学习Linux辅助软件介绍"><a href="#2-学习Linux辅助软件介绍" class="headerlink" title="2.学习Linux辅助软件介绍"></a>2.学习Linux辅助软件介绍</h2><p>虚拟机 Vmware，VirtualPC和Bochs等。<br>Linux源代码阅读工具 Source Insight</p><p>源码阅读网站 <a href="http://lxr.linux.no" target="_blank" rel="noopener">http://lxr.linux.no</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;1 熟悉在Linux操作系统下的基本操作，对Linux操作系统有一个感性认识&lt;br&gt;2 参阅相关Linux的命令参考手册，熟悉Linux下的
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mysql命令基础大全</title>
    <link href="http://yoursite.com/2019/11/15/mysql%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/11/15/mysql%E5%91%BD%E4%BB%A4/</id>
    <published>2019-11-15T07:14:54.974Z</published>
    <updated>2019-11-21T01:12:54.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需知"><a href="#需知" class="headerlink" title="需知"></a>需知</h2><p>以下是整理的一些基础的Mysql的命令<br>如果还需要深层的探索可以转接此地址<a href="https://www.mysql.com" target="_blank" rel="noopener">Mysql官网</a></p><h2 id="Mysql命令锦集"><a href="#Mysql命令锦集" class="headerlink" title="Mysql命令锦集"></a>Mysql命令锦集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">　mysql -h主机地址 -u用户名 －p密码 连接MYSQL;如果刚安装好MYSQL，超级用户root是没有密码的。</span><br><span class="line">　　（例：mysql -h110.110.110.110 -Uroot -P123456</span><br><span class="line">　　注:u与root可以不用加空格，其它也一样）</span><br><span class="line">　　<span class="built_in">exit</span> 退出MYSQL</span><br><span class="line">　　mysqladmin -u用户名 -p旧密码 password 新密码 修改密码</span><br><span class="line">　　grant select on 数据库.* to 用户名@登录主机 identified by <span class="string">"密码"</span>; 增加新用户。（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）</span><br><span class="line">　　show databases; 显示数据库列表。刚开始时才两个数据库：mysql和<span class="built_in">test</span>。mysql库很重要它里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</span><br><span class="line">　　use mysql；</span><br><span class="line">　　show tables; 显示库中的数据表</span><br><span class="line">　　describe 表名; 显示数据表的结构</span><br><span class="line">　　create database 库名; 建库</span><br><span class="line">　　use 库名；</span><br><span class="line">　　create table 表名 (字段设定列表)； 建表</span><br><span class="line">　　drop database 库名;</span><br><span class="line">　　drop table 表名； 删库和删表</span><br><span class="line">　　delete from 表名; 将表中记录清空</span><br><span class="line">　　select * from 表名; 显示表中的记录</span><br><span class="line">　　mysqldump --opt school&gt;school.bbb 备份数据库：（命令在DOS的mysqlin目录下执行）;注释:将数据库school备份到school.bbb文件，school.bbb是一个文本文件，文件名任取，打开看看你会有新发现。</span><br><span class="line">　　win2003系统下新增命令（实用部份）：</span><br><span class="line">　　shutdown /参数 关闭或重启本地或远程主机。</span><br><span class="line">　　参数说明：/S 关闭主机，/R 重启主机， /T 数字 设定延时的时间，范围0～180秒之间， /A取消开机，/M //IP 指定的远程主机。</span><br><span class="line">　　例：shutdown /r /t 0 立即重启本地主机（无延时）</span><br><span class="line">　　taskill /参数 进程名或进程的pid 终止一个或多个任务和进程。</span><br><span class="line">　　参数说明：/PID 要终止进程的pid,可用tasklist命令获得各进程的pid，/IM 要终止的进程的进程名，/F 强制终止进程，/T 终止指定的进程及他所启动的子进程。</span><br><span class="line">　　tasklist 显示当前运行在本地和远程主机上的进程、服务、服务各进程的进程标识符(PID)。</span><br><span class="line">　　参数说明：/M 列出当前进程加载的dll文件，/SVC 显示出每个进程对应的服务，无参数时就只列出当前的进程。</span><br><span class="line">　　Linux系统下基本命令　注：要区分大小写</span><br><span class="line">　　uname 显示版本信息（同win2K的 ver）</span><br><span class="line">　　dir 显示当前目录文件,ls -al 显示包括隐藏文件（同win2K的 dir）</span><br><span class="line">　　<span class="built_in">pwd</span> 查询当前所在的目录位置</span><br><span class="line">　　<span class="built_in">cd</span> <span class="built_in">cd</span>　..回到上一层目录，注意<span class="built_in">cd</span> 与..之间有空格。<span class="built_in">cd</span>　/返回到根目录。</span><br><span class="line">　　cat 文件名 查看文件内容</span><br><span class="line">　　cat &gt;abc.txt 往abc.txt文件中写上内容。</span><br><span class="line">　　more 文件名 以一页一页的方式显示一个文本文件。</span><br><span class="line">　　cp 复制文件</span><br><span class="line">　　mv 移动文件</span><br><span class="line">　　rm 文件名 删除文件，rm -a 目录名删除目录及子目录</span><br><span class="line">　　mkdir 目录名 建立目录</span><br><span class="line">　　rmdir 删除子目录，目录内没有文档。</span><br><span class="line">　　chmod 设定档案或目录的存取权限</span><br><span class="line">　　grep 在档案中查找字符串</span><br><span class="line">　　diff 档案文件比较</span><br><span class="line">　　find 档案搜寻</span><br><span class="line">　　date 现在的日期、时间</span><br><span class="line">　　who 查询目前和你使用同一台机器的人以及Login时间地点</span><br><span class="line">　　w 查询目前上机者的详细资料</span><br><span class="line">　　whoami 查看自己的帐号名称</span><br><span class="line">　　groups 查看某人的Group</span><br><span class="line">　　passwd 更改密码</span><br><span class="line">　　<span class="built_in">history</span> 查看自己下过的命令</span><br><span class="line">　　ps 显示进程状态</span><br><span class="line">　　<span class="built_in">kill</span> 停止某进程</span><br><span class="line">　　gcc 黑客通常用它来编译C语言写的文件</span><br><span class="line">　　su 权限转换为指定使用者</span><br><span class="line">　　telnet IP telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。</span><br><span class="line">　　ftp ftp连接上某服务器（同win2K）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需知&quot;&gt;&lt;a href=&quot;#需知&quot; class=&quot;headerlink&quot; title=&quot;需知&quot;&gt;&lt;/a&gt;需知&lt;/h2&gt;&lt;p&gt;以下是整理的一些基础的Mysql的命令&lt;br&gt;如果还需要深层的探索可以转接此地址&lt;a href=&quot;https://www.mysql.com
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Windows CMD命令大全</title>
    <link href="http://yoursite.com/2019/11/15/cmd%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/11/15/cmd%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2019-11-15T07:14:54.967Z</published>
    <updated>2019-11-21T01:13:57.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h2><p>cmd是command的缩写.即命令行 。</p><p>虽然随着计算机产业的发展，Windows 操作系统的应用越来越广泛，DOS 面临着被淘汰的命运，但是因为它运行安全、稳定，有的用户还在使用，所以一般Windows 的各种版本都与其兼容，用户可以在Windows 系统下运行DOS，中文版Windows XP 中的命令提示符进一步提高了与DOS 下操作命令的兼容性，用户可以在命令提示符直接输入中文调用文件。</p><p>　　在9x系统下输入command就可以打开命令行.而在NT系统上可以输入cmd来打开，在windows2003后被cmd替代，利用CMD命令查询系统的信息或者是判断网络的好坏。</p><h2 id="运行操作"><a href="#运行操作" class="headerlink" title="运行操作"></a>运行操作</h2><h3 id="CMD命令：开始－-gt-运行－-gt-键入cmd或command-在命令行里可以看到系统版本、文件系统版本"><a href="#CMD命令：开始－-gt-运行－-gt-键入cmd或command-在命令行里可以看到系统版本、文件系统版本" class="headerlink" title="CMD命令：开始－&gt;运行－&gt;键入cmd或command(在命令行里可以看到系统版本、文件系统版本)"></a>CMD命令：开始－&gt;运行－&gt;键入cmd或command(在命令行里可以看到系统版本、文件系统版本)</h3><h2 id="CMD命令锦集"><a href="#CMD命令锦集" class="headerlink" title="CMD命令锦集"></a>CMD命令锦集</h2><pre><code class="bash">1. gpedit.msc-----组策略　　2. sndrec32-------录音机　　3. Nslookup-------IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。　　4. explorer-------打开资源管理器　　5. logoff---------注销命令　　6. shutdown-------60秒倒计时关机命令　　7. lusrmgr.msc----本机用户和组　　8. services.msc---本地服务设置　　9. oobe/msoobe /a----检查XP是否激活　　10. notepad--------打开记事本　　11. cleanmgr-------垃圾整理　　12. net start messenger----开始信使服务　　13. compmgmt.msc---计算机管理　　14. net stop messenger-----停止信使服务　　15. conf-----------启动netmeeting　　16. dvdplay--------DVD播放器　　17. charmap--------启动字符映射表　　18. diskmgmt.msc---磁盘管理实用程序　　19. calc-----------启动计算器　　20. dfrg.msc-------磁盘碎片整理程序　　21. chkdsk.exe-----Chkdsk磁盘检查　　22. devmgmt.msc--- 设备管理器　　23. regsvr32 /u *.dll----停止dll文件运行　　24. drwtsn32------ 系统医生　　25. rononce -p----15秒关机　　26. dxdiag---------检查DirectX信息　　27. regedt32-------注册表编辑器　　28. Msconfig.exe---系统配置实用程序　　29. rsop.msc-------组策略结果集　　30. mem.exe--------显示内存使用情况　　31. regedit.exe----注册表　　32. winchat--------XP自带局域网聊天　　33. progman--------程序管理器　　34. winmsd---------系统信息　　35. perfmon.msc----计算机性能监测程序　　36. winver---------检查Windows版本　　37. sfc /scannow-----扫描错误并复原　　38. taskmgr-----任务管理器（2000/xp/2003　　40. wmimgmt.msc----打开windows管理体系结构(WMI)　　41. wupdmgr--------windows更新程序　　42. wscript--------windows脚本宿主设置　　43. write----------写字板　　45. wiaacmgr-------扫描仪和照相机向导　　46. winchat--------XP自带局域网聊天　　49. mplayer2-------简易widnows media player　　50. mspaint--------画图板　　51. mstsc----------远程桌面连接　　53. magnify--------放大镜实用程序　　54. mmc------------打开控制台　　55. mobsync--------同步命令　　57. iexpress-------木马捆绑工具，系统自带　　58. fsmgmt.msc-----共享文件夹管理器　　59. utilman--------辅助工具管理器　　61. dcomcnfg-------打开系统组件服务　　62. ddeshare-------打开DDE共享设置　　110. osk------------打开屏幕键盘　　111. odbcad32-------ODBC数据源管理器　　112. oobe/msoobe /a----检查XP是否激活　　68. ntbackup-------系统备份和还原　　69. narrator-------屏幕“讲述人”　　70. ntmsmgr.msc----移动存储管理器　　71. ntmsoprq.msc---移动存储管理员操作请求　　72. netstat -an----(TC)命令检查接口　　73. syncapp--------创建一个公文包　　74. sysedit--------系统配置编辑器　　75. sigverif-------文件签名验证程序　　76. ciadv.msc------索引服务程序　　77. shrpubw--------创建共享文件夹　　78. secpol.msc-----本地安全策略　　79. syskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码　　80. services.msc---本地服务设置　　81. Sndvol32-------音量控制程序　　82. sfc.exe--------系统文件检查器　　83. sfc /scannow---windows文件保护　　84. ciadv.msc------索引服务程序　　85. tourstart------xp简介（安装完成后出现的漫游xp程序）　　86. taskmgr--------任务管理器　　87. eventvwr-------事件查看器　　88. eudcedit-------造字程序　　89. compmgmt.msc---计算机管理　　90. packager-------对象包装程序　　91. perfmon.msc----计算机性能监测程序　　92. charmap--------启动字符映射表　　93. cliconfg-------SQL SERVER 客户端网络实用程序　　94. Clipbrd--------剪贴板查看器　　95. conf-----------启动netmeeting　　96. certmgr.msc----证书管理实用程序　　97. regsvr32 /u *.dll----停止dll文件运行　　98. regsvr32 /u zipfldr.dll------取消ZIP支持　　99. cmd.exe--------CMD命令提示符</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令简介&quot;&gt;&lt;a href=&quot;#命令简介&quot; class=&quot;headerlink&quot; title=&quot;命令简介&quot;&gt;&lt;/a&gt;命令简介&lt;/h2&gt;&lt;p&gt;cmd是command的缩写.即命令行 。&lt;/p&gt;
&lt;p&gt;虽然随着计算机产业的发展，Windows 操作系统的应用越来越广泛
      
    
    </summary>
    
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="CMD" scheme="http://yoursite.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/15/hello-world/"/>
    <id>http://yoursite.com/2019/11/15/hello-world/</id>
    <published>2019-11-15T02:57:43.525Z</published>
    <updated>2019-11-21T01:14:39.142Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你好,欢迎来到我的博客</title>
    <link href="http://yoursite.com/2019/10/14/%E4%BD%A0%E5%A5%BD-Hexo/"/>
    <id>http://yoursite.com/2019/10/14/%E4%BD%A0%E5%A5%BD-Hexo/</id>
    <published>2019-10-14T06:48:00.000Z</published>
    <updated>2019-11-21T01:14:59.966Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
