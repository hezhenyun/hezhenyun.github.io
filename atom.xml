<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>浮生醉清风</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hezhenyun.github.io/"/>
  <updated>2020-03-19T07:00:42.712Z</updated>
  <id>http://hezhenyun.github.io/</id>
  
  <author>
    <name>何阵运(HE)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scrapy框架中间件的调用规则</title>
    <link href="http://hezhenyun.github.io/2020/03/19/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99/"/>
    <id>http://hezhenyun.github.io/2020/03/19/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99/</id>
    <published>2020-03-19T07:01:00.971Z</published>
    <updated>2020-03-19T07:00:42.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="process-request"><a href="#process-request" class="headerlink" title="process_request"></a>process_request</h2><p>在request对象传往downloader的过程中调用。当返回不同类型的值的时候，行为也不一样：</p><table><thead><tr><th>返回值</th><th>行为</th></tr></thead><tbody><tr><td>None</td><td>一切正常，继续执行其他的中间件链</td></tr><tr><td>Response</td><td>停止调用其他process_request和process_exception函数，也不再继续下载该请求，然后走调用process_response的流程</td></tr><tr><td>Request</td><td>不再继续调用其他process_request函数，交由调度器重新安排下载。</td></tr><tr><td>IgnoreRequest</td><td>process_exception函数会被调用，如果没有此方法，则request.errback会被调用，如果errback也没有，则此异常会被忽略，甚至连日志都没有。</td></tr></tbody></table><h2 id="process-response"><a href="#process-response" class="headerlink" title="process_response"></a>process_response</h2><p>在将下载结果返回给engine过程中被调用</p><table><thead><tr><th>返回值</th><th>行为</th></tr></thead><tbody><tr><td>Response</td><td>续续调用其他中间件的process_response</td></tr><tr><td>Request</td><td>不再继续调用其他process_request函数，交由调度器重新安排下载。</td></tr><tr><td>IgnoreRequest</td><td>则request.errback会被调用，如果errback也没有，则此异常会被忽略，甚至连日志都没有。</td></tr></tbody></table><h2 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h2><p>在下载过程中出现异常，或者在process_request中抛出IgnoreRequest异常的时候调用。</p><table><thead><tr><th>返回值</th><th>行为</th></tr></thead><tbody><tr><td>Response</td><td>开始中间件链的process_response处理流程</td></tr><tr><td>Request</td><td>不再继续调用其他process_request函数，交由调度器重新安排下载。</td></tr><tr><td>None</td><td>继续调用其他中间件里的process_exception函数</td></tr></tbody></table><h2 id="from-crawler-cls-crawler"><a href="#from-crawler-cls-crawler" class="headerlink" title="from_crawler(cls, crawler)"></a>from_crawler(cls, crawler)</h2><p>如果存在该函数，则调用该函数创建中间件的实例。如果要写这个函数，一定要返回一个中间件的对象。</p><h1 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h1><p>请求robots.txt文件，并解析其中的规则。</p><p>scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware</p><p>执行带Basic-auth验证的请求</p><p>scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware</p><p>下载请求超时最大时长</p><p>scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware</p><p>设置默认的请求头信息</p><p>scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware</p><p>设置请求头信息里的User-Agent</p><p>scrapy.downloadermiddlewares.useragent.UserAgentMiddleware</p><p>如果下载失败，是否重试，重试几次</p><p>scrapy.downloadermiddlewares.retry.RetryMiddleware</p><p>实现Meta标签重定向</p><p>scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware</p><p>实现压缩内容的解析（比如gzip）</p><p>scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware</p><p>实现30x的HTTP code的重定向</p><p>scrapy.downloadermiddlewares.redirect.RedirectMiddleware</p><p>实现对cookies的设置管理</p><p>scrapy.downloadermiddlewares.cookies.CookiesMiddleware</p><p>实现IP代理</p><p>scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware</p><p>下载信息的统计</p><p>scrapy.downloadermiddlewares.stats.DownloaderStats</p><p>下载结果的缓存</p><p>scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;process-request&quot;&gt;&lt;a href=&quot;#process-request&quot; class=&quot;headerlink&quot; title=&quot;process_request&quot;&gt;&lt;/a&gt;process_request&lt;/h2&gt;&lt;p&gt;在request对象传往downlo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>反爬虫</title>
    <link href="http://hezhenyun.github.io/2020/03/19/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    <id>http://hezhenyun.github.io/2020/03/19/%E5%8F%8D%E7%88%AC%E8%99%AB/</id>
    <published>2020-03-19T06:53:13.082Z</published>
    <updated>2019-11-11T10:46:36.051Z</updated>
    
    <content type="html"><![CDATA[<h3 id="User-Agent识别"><a href="#User-Agent识别" class="headerlink" title="User-Agent识别"></a>User-Agent识别</h3><p>修改请求头信息里的User-Agent</p><h3 id="请求头信息识别"><a href="#请求头信息识别" class="headerlink" title="请求头信息识别"></a>请求头信息识别</h3><p>比如说referer, content-type,请求方法（POST, GET）</p><p>构造相应的请求头信息。比如说referer，我们在提取URL的时候，要把URL所在页面的URL也存储起来，并放到request.headers。</p><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>我们需要分析页面的网络请求，从中找出和我们想要的数据相关的请求，并分析它的请求头信息、参数、cookie，然后根据这些信息构造我们的请求。通常来说都是ajax请求，也有图片请求，比如图片的lazy load，通过js在页面加载后修改图片的src属性。一般都会有其他的自定义属性存在，比如说”_src”。总之，可以找到一些ID或者链接。注意观察相关dom节点树上的特殊属性。</p><h3 id="请求参数加密"><a href="#请求参数加密" class="headerlink" title="请求参数加密"></a>请求参数加密</h3><p>一般是在前端通过一定的计算，构造出一个哈希值。需要分析前端的代码，找出具体计算的代码逻辑，并用python再实现。如果前端的代码经过混淆，并且代码量十分巨大，可以使用selenium或者splash等引擎去请求。但是，如果爬取的数据需求量比较大，我们还是要通过直接调用对方接口的形式去获取数据。</p><h2 id="请求结果加密"><a href="#请求结果加密" class="headerlink" title="请求结果加密"></a>请求结果加密</h2><h2 id="1-json数据里面加密"><a href="#1-json数据里面加密" class="headerlink" title="1. json数据里面加密"></a>1. json数据里面加密</h2><p>比如携程酒店房型列表接口，用它自己的js解密，或者分析它的js前端逻辑，用python代码实现出来。</p><h3 id="2-CSS加密"><a href="#2-CSS加密" class="headerlink" title="2. CSS加密"></a>2. CSS加密</h3><p>比如大众点评，通过CSS样式去代替某个字符。我们需要同时爬取CSS文件，并且分析CSS文件内的样式，最后定位到svg文件，并分析提取svg内的内容，完成替换。</p><h3 id="3-字体加密"><a href="#3-字体加密" class="headerlink" title="3. 字体加密"></a>3. 字体加密</h3><p>比如猫眼电影。每次随机返回一个字体文件，并且字符也是随机的。需要每次下载对应的字体文件，并解析字体文件和字符之间的对应关系。</p><h2 id="Cookie限制"><a href="#Cookie限制" class="headerlink" title="Cookie限制"></a>Cookie限制</h2><p>登录、session限制，比如新片场，拿到登录以后的cookie，然后set到头信息里面，这样请求的时候就相当于登录了。</p><h2 id="IP频率限制"><a href="#IP频率限制" class="headerlink" title="IP频率限制"></a>IP频率限制</h2><p>需要准备大量的IP代理，获得IP代理的方式有：</p><ol><li>自己搭建代理服务器（tinyproxy, squid+动态拨号，DDNS）</li><li>付费购买</li><li>爬取公开网络上代理（可用性比较低）</li></ol><p>控制爬取频率，保持不被封的情况下的最合适的并发数量。</p><h2 id="验证码："><a href="#验证码：" class="headerlink" title="验证码："></a>验证码：</h2><ol><li>尝试可否绕过前端验证，直接请求具体的接口，以绕开验证码.</li><li>可以用图片识别库去识别某些比较简单的验证码</li><li>接入云打码平台</li><li>用机器学习训练验证码的图片库，然后识别</li></ol><p>n</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;User-Agent识别&quot;&gt;&lt;a href=&quot;#User-Agent识别&quot; class=&quot;headerlink&quot; title=&quot;User-Agent识别&quot;&gt;&lt;/a&gt;User-Agent识别&lt;/h3&gt;&lt;p&gt;修改请求头信息里的User-Agent&lt;/p&gt;
&lt;h3 id
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python面试题(一)</title>
    <link href="http://hezhenyun.github.io/2019/12/09/python%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://hezhenyun.github.io/2019/12/09/python%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2019-12-09T13:50:56.938Z</published>
    <updated>2019-12-09T13:52:41.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、列出5个常用Python标准库"><a href="#一、列出5个常用Python标准库" class="headerlink" title="一、列出5个常用Python标准库"></a>一、列出5个常用Python标准库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">os：提供了不少与操作系统相关联的函数</span><br><span class="line"></span><br><span class="line">sys:   通常用于命令行参数</span><br><span class="line"></span><br><span class="line">re:   正则匹配</span><br><span class="line"></span><br><span class="line">math: 数学运算</span><br><span class="line"></span><br><span class="line">datetime:处理日期时间</span><br></pre></td></tr></table></figure><h2 id="二、python内建数据类型有哪些？"><a href="#二、python内建数据类型有哪些？" class="headerlink" title="二、python内建数据类型有哪些？"></a>二、python内建数据类型有哪些？</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">基本内置数据类型对应符号</span><br><span class="line">1）整型——int——数字</span><br><span class="line">python有5种数字类型，最常见的就是整型int。例如：1234、-1234</span><br><span class="line"></span><br><span class="line">2）布尔型——bool——用符号==表示</span><br><span class="line">布尔型是一种比较特殊的python数字类型，它只有True和False两种值，它主要用来比较和判断，所得结果叫做布尔值。例如：3==3 给出True，3==5给出False</span><br><span class="line"></span><br><span class="line">3）字符串——str——用<span class="string">' '</span>或<span class="string">" "</span>表示</span><br><span class="line">例如：<span class="string">'www.iplaypython.com'</span>或者<span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">4）列表——list——用[ ]符号表示</span><br><span class="line">例如：[1,2,3,4]</span><br><span class="line"></span><br><span class="line">5）元组——tuple——用( )符号表示</span><br><span class="line">例如：（<span class="string">'d'</span>,300）</span><br><span class="line"></span><br><span class="line">6）字典——dict——用&#123; &#125;符号表示</span><br><span class="line">例如：｛<span class="string">'name'</span>:<span class="string">'coco'</span>,<span class="string">'country'</span>:<span class="string">'china'</span>｝</span><br></pre></td></tr></table></figure><h2 id="三、简述with方法打开处理文件帮我们做了些什么"><a href="#三、简述with方法打开处理文件帮我们做了些什么" class="headerlink" title="三、简述with方法打开处理文件帮我们做了些什么"></a>三、简述with方法打开处理文件帮我们做了些什么</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开文件在进行读写的时候可能会出现一些异常状况，如果按照常规的f.open</span><br><span class="line"></span><br><span class="line">写法，我们需要try,except,finally，做异常判断，并且文件最终不管遇到什么情况，都要执行finally f.close()关闭文件，with方法帮我们实现了finally中f.close</span><br></pre></td></tr></table></figure><h2 id="四、列出python中可变数据类型和不可变数据类型，并简述原理"><a href="#四、列出python中可变数据类型和不可变数据类型，并简述原理" class="headerlink" title="四、列出python中可变数据类型和不可变数据类型，并简述原理"></a>四、列出python中可变数据类型和不可变数据类型，并简述原理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不可变数据类型：数值型、字符串型string和元组tuple</span><br><span class="line"></span><br><span class="line">不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象（一个地址）</span><br><span class="line"></span><br><span class="line">可变数据类型：列表list和字典dict；</span><br><span class="line"></span><br><span class="line">允许变量的值发生变化，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。</span><br></pre></td></tr></table></figure><h2 id="五、遇到bug如何处理"><a href="#五、遇到bug如何处理" class="headerlink" title="五、遇到bug如何处理"></a>五、遇到bug如何处理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、细节上的错误，通过<span class="built_in">print</span>（）打印，能执行到<span class="built_in">print</span>（）说明一般上面的代码没有问题，分段检测程序是否有问题，如果是js的话可以alert或console.log</span><br><span class="line"></span><br><span class="line">2、如果涉及一些第三方框架，会去查官方文档或者一些技术博客。</span><br><span class="line"></span><br><span class="line">3、对于bug的管理与归类总结，一般测试将测试出的bug用teambin等bug管理工具进行记录，然后我们会一条一条进行修改，修改的过程也是理解业务逻辑和提高自己编程逻辑缜密性的方法，我也都会收藏做一些笔记记录。</span><br><span class="line"></span><br><span class="line">4、导包问题、城市定位多音字造成的显示错误问题</span><br></pre></td></tr></table></figure><h2 id="六、列出常见的状态码和意义"><a href="#六、列出常见的状态码和意义" class="headerlink" title="六、列出常见的状态码和意义"></a>六、列出常见的状态码和意义</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">200 OK </span><br><span class="line"></span><br><span class="line">请求正常处理完毕</span><br><span class="line"></span><br><span class="line">204 No Content </span><br><span class="line"></span><br><span class="line">请求成功处理，没有实体的主体返回</span><br><span class="line"></span><br><span class="line">206 Partial Content </span><br><span class="line"></span><br><span class="line">GET范围请求已成功处理</span><br><span class="line"></span><br><span class="line">301 Moved Permanently </span><br><span class="line"></span><br><span class="line">永久重定向，资源已永久分配新URI</span><br><span class="line"></span><br><span class="line">302 Found </span><br><span class="line"></span><br><span class="line">临时重定向，资源已临时分配新URI</span><br><span class="line"></span><br><span class="line">303 See Other </span><br><span class="line"></span><br><span class="line">临时重定向，期望使用GET定向获取</span><br><span class="line"></span><br><span class="line">304 Not Modified </span><br><span class="line"></span><br><span class="line">发送的附带条件请求未满足</span><br><span class="line"></span><br><span class="line">307 Temporary Redirect </span><br><span class="line"></span><br><span class="line">临时重定向，POST不会变成GET</span><br><span class="line"></span><br><span class="line">400 Bad Request </span><br><span class="line"></span><br><span class="line">请求报文语法错误或参数错误</span><br><span class="line"></span><br><span class="line">401 Unauthorized </span><br><span class="line"></span><br><span class="line">需要通过HTTP认证，或认证失败</span><br><span class="line"></span><br><span class="line">403 Forbidden </span><br><span class="line"></span><br><span class="line">请求资源被拒绝</span><br><span class="line"></span><br><span class="line">404 Not Found </span><br><span class="line"></span><br><span class="line">无法找到请求资源（服务器无理由拒绝）</span><br><span class="line"></span><br><span class="line">500 Internal Server Error </span><br><span class="line"></span><br><span class="line">服务器故障或Web应用故障</span><br><span class="line"></span><br><span class="line">503 Service Unavailable </span><br><span class="line"></span><br><span class="line">服务器超负载或停机维护</span><br></pre></td></tr></table></figure><h2 id="七、什么是python之禅"><a href="#七、什么是python之禅" class="headerlink" title="七、什么是python之禅"></a>七、什么是python之禅</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Beautiful is better than ugly.</span><br><span class="line"> 优美胜于丑陋（Python以编写优美的代码为目标）</span><br><span class="line"> </span><br><span class="line">Explicit is better than implicit.</span><br><span class="line"> 明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class="line"> </span><br><span class="line">Simple is better than complex.</span><br><span class="line"> 简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class="line"> </span><br><span class="line">Complex is better than complicated.</span><br><span class="line"> 复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class="line"> </span><br><span class="line">Flat is better than nested.</span><br><span class="line"> 扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class="line"> </span><br><span class="line">Sparse is better than dense.</span><br><span class="line"> 间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class="line"> </span><br><span class="line">Readability counts.</span><br><span class="line"> 可读性很重要（优美的代码是可读的）</span><br><span class="line"> </span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string"> 即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string"> 不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写except:pass风格的代码）</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string"> 当存在多种可能，不要尝试去猜测</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string"> 而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line"> 虽然这并不容易，因为你不是 Python 之父（这里的Dutch是指Guido）</span><br><span class="line"> </span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line"> 做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class="line"> </span><br><span class="line">If the implementation is hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string"> 如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s <span class="keyword">do</span> more of those!</span><br><span class="line"> 命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure><h2 id="八、python2和python3区别？列举5个"><a href="#八、python2和python3区别？列举5个" class="headerlink" title="八、python2和python3区别？列举5个"></a>八、python2和python3区别？列举5个</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、Python3 使用 <span class="built_in">print</span> 必须要以小括号包裹打印内容，比如 <span class="built_in">print</span>(<span class="string">'hi'</span>)</span><br><span class="line"></span><br><span class="line">Python2 既可以使用带小括号的方式，也可以使用一个空格来分隔打印内容，比如 <span class="built_in">print</span> <span class="string">'hi'</span></span><br><span class="line"></span><br><span class="line">2、python2 range(1,10)返回列表，python3中返回迭代器，节约内存</span><br><span class="line"></span><br><span class="line">3、python2中使用ascii编码，python中使用utf-8编码</span><br><span class="line"></span><br><span class="line">4、python2中unicode表示字符串序列，str表示字节序列</span><br><span class="line"></span><br><span class="line">      python3中str表示字符串序列，byte表示字节序列</span><br><span class="line"></span><br><span class="line">5、python2中为正常显示中文，引入coding声明，python3中不需要</span><br><span class="line"></span><br><span class="line">6、python2中是raw_input()函数，python3中是input()函数</span><br></pre></td></tr></table></figure><h2 id="九、10个Linux常用命令"><a href="#九、10个Linux常用命令" class="headerlink" title="九、10个Linux常用命令"></a>九、10个Linux常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls  <span class="built_in">pwd</span>  <span class="built_in">cd</span>  touch  rm  mkdir  tree  cp  mv  cat  more  grep  <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><h2 id="十、简述多线程、多进程"><a href="#十、简述多线程、多进程" class="headerlink" title="十、简述多线程、多进程"></a>十、简述多线程、多进程</h2><h3 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、操作系统进行资源分配和调度的基本单位，多个进程之间相互独立</span><br><span class="line"></span><br><span class="line">2、稳定性好，如果一个进程崩溃，不影响其他进程，但是进程消耗资源大，开启的进程数量有限制</span><br></pre></td></tr></table></figure><h3 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、CPU进行资源分配和调度的基本单位，线程是进程的一部分，是比进程更小的能独立运行的基本单位，一个进程下的多个线程可以共享该进程的所有资源</span><br><span class="line"></span><br><span class="line">2、如果IO操作密集，则可以多线程运行效率高，缺点是如果一个线程崩溃，都会造成进程的崩溃</span><br></pre></td></tr></table></figure><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IO密集的用多线程，在用户输入，sleep 时候，可以切换到其他线程执行，减少等待的时间</span><br><span class="line"></span><br><span class="line">CPU密集的用多进程，因为假如IO操作少，用多线程的话，因为线程共享一个全局解释器锁，当前运行的线程会霸占GIL，其他线程没有GIL，就不能充分利用多核CPU的优势</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、列出5个常用Python标准库&quot;&gt;&lt;a href=&quot;#一、列出5个常用Python标准库&quot; class=&quot;headerlink&quot; title=&quot;一、列出5个常用Python标准库&quot;&gt;&lt;/a&gt;一、列出5个常用Python标准库&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
    
      <category term="python面试题" scheme="http://hezhenyun.github.io/tags/python%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>python中的编码问题</title>
    <link href="http://hezhenyun.github.io/2019/12/06/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://hezhenyun.github.io/2019/12/06/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</id>
    <published>2019-12-06T12:25:54.802Z</published>
    <updated>2019-12-06T12:39:15.400Z</updated>
    
    <content type="html"><![CDATA[<p>声明：文章借鉴自【彻底搞懂 python 中文乱码问题】</p><h2 id="一-各种编码的由来"><a href="#一-各种编码的由来" class="headerlink" title="一. 各种编码的由来"></a>一. 各种编码的由来</h2><h3 id="1-1-ASCII编码"><a href="#1-1-ASCII编码" class="headerlink" title="1.1 ASCII编码"></a>1.1 ASCII编码</h3><p>很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为”字节“。再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机“。开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。 他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作。遇上0×10, 终端就换行，遇上0×07, 终端就向人们嘟嘟叫，例好遇上0x1b, 打印机就打印反白的字，或者终端就用彩色显示字母。他们看到这样很好，于是就把这些0×20以下的字节状态称为”控制码”。他们又把所有的空 格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。</p><h3 id="1-2-GB2312编码"><a href="#1-2-GB2312编码" class="headerlink" title="1.2 GB2312编码"></a>1.2 GB2312编码</h3><p>后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是ASCII里没有的，为了可以在计算机保存他们的文字，他们决定采用 127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称”扩展字符集“。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。</p><p>但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做 “GB2312“。GB2312 是对 ASCII 的中文扩展。</p><h3 id="1-3-GBK编码"><a href="#1-3-GBK编码" class="headerlink" title="1.3 GBK编码"></a>1.3 GBK编码</h3><p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。 后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。</p><p>从此之后，中华民族的文化就可以在计算机时代中传承了。 中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “DBCS“（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍： “一个汉字算两个英文字符！一个汉字算两个英文字符……”</p><p>因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 BIG5 编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？ 真是计算机的巴比伦塔命题啊！</p><h3 id="1-4-UNICODE号"><a href="#1-4-UNICODE号" class="headerlink" title="1.4 UNICODE号"></a>1.4 UNICODE号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【注意】：这儿是unicode号，不叫Unicode编码，一会儿你就知道为什么了</span><br></pre></td></tr></table></figure><p>正在这时，大天使加百列及时出现了，一个叫 ISO（国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。unicode开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ASCII里的那些“半角”字符，unicode 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。</p><p>由于”半角”英文符号只需要用到低8位，所以其高8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的 strlen 函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的，从 unicode 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”一个字符“！同时，也都是统一的”两个字节“，请注意”字符”和”字节”两个术语的不同，“字节”是一个8位的物理存贮单元，而“字符”则是一个文化相关的符号。在 unicode 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。</p><p>unicode 同样也不完美，这里就有两个的问题，一个是，如何才能区别 unicode 和 ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。</p><h3 id="1-5-UTF-8编码"><a href="#1-5-UTF-8编码" class="headerlink" title="1.5 UTF-8编码"></a>1.5 UTF-8编码</h3><p>nicode 在很长一段时间内无法推广，直到互联网的出现，为解决 unicode 如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而 UTF-16 就是每次16个位。UTF-8就是在互联网上使用最广的一种 unicode 的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在 ASCII 码的范围时，就用一个字节表示，保留了 ASCII 字符一个字节的编码做为它的一部分，注意的是 unicode 一个中文字符占2个字节，而UTF-8一个中文字符占3个字节）。从 unicode 到 uft-8 并不是直接的对应，而是要过一些算法和规则来转换。</p><p>看到这里你是彻底懵逼还是恍然大悟，如果是彻底懵逼建议你再多看几次，温故而知新，如果恍然大悟的话我们就接着往下看。</p><h2 id="二-乱码的例子"><a href="#二-乱码的例子" class="headerlink" title="二.乱码的例子"></a>二.乱码的例子</h2><p>介绍完了基础知识，我们来说说 Python 中是如何存储字符的，先来看一个乱码的例子。新建一个 demo.py 文件，文件存储格式为utf-8文件中内容如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"中文"</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure><p>然后后cmd中运行</p><p><img src="https://image-static.segmentfault.com/108/508/1085086337-5bcc603b10ca9_articlex" alt="如图所示"></p><p>正如你想的那样，报错了。保存信息说没有’xe4’的ASCII码，当然啦，ASCII是英文编码，当然不认识中文啦，那我们想到的应该第一步是告诉解释器我们这是需要用什么编码来解释我们的代码的，Python默认就是ASCII编码，我们试一下用utf8来解释我们的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">s = <span class="string">"中文"</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure><p>上面的代码理论上是对的，但是！但是！呵呵！！！</p><p><img src="https://image-static.segmentfault.com/164/048/1640482390-5bcc614b91878_articlex" alt="如图所示"></p><p>我们在cmd中执行，确实是没有报错了，但是这是什么东西我们也看不懂呀。我解释一下吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【下面是知识点，圈起来，考试要考】</span><br><span class="line">我们在cmd中输入或者输出的时候其实也涉及到编码为问题，，查看 cmd 的编码命令是 chcp，返回 936，936 代表 GBK 编码，而将中文的utf-8 编码 \xe4\xb8\xad\xe6\x96\x87 强制转换为 GBK 就会乱码了，GBK 是两个字节存储一个中文字符，所以 \xe4\xb8\xad\xe6\x96\x87 会解码成三个字</span><br></pre></td></tr></table></figure><p>如果我们换成在cmd中交互，在cmd中执行以上的代码，那当然就不会出现我们预期之外的结果了，因为编码都一致了。</p><p><img src="https://image-static.segmentfault.com/312/983/3129830585-5bcc62e02da10_articlex" alt="如图所示"></p><p>我们不可能在交互模式中写大量代码呀，我们还是得解决文件中的问题</p><h2 id="三-文件中的中文解决方案"><a href="#三-文件中的中文解决方案" class="headerlink" title="三. 文件中的中文解决方案"></a>三. 文件中的中文解决方案</h2><h3 id="3-1-统一编码，统一文件系统和解释器的编码"><a href="#3-1-统一编码，统一文件系统和解释器的编码" class="headerlink" title="3.1 统一编码，统一文件系统和解释器的编码"></a>3.1 统一编码，统一文件系统和解释器的编码</h3><p>上面那个cmd的例子，如果我们把文件系统改成gbk存储，同时告诉解释器用gbk解析，那么和cmd的编码格式就一致了，也就和我们预期的一样了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:gbk</span></span><br><span class="line">s = <span class="string">"中文"</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/227/369/2273696898-5bcc63e0845a3_articlex" alt="如图所示"></p><p>【注意】：但是我们互联网交换使用的编码是utf-8,所以gbk当然不推荐</p><h3 id="3-2-中文用-unicode-表示（推荐）"><a href="#3-2-中文用-unicode-表示（推荐）" class="headerlink" title="3.2 中文用 unicode 表示（推荐）"></a>3.2 中文用 unicode 表示（推荐）</h3><p>都知道每一个字符在计算机中都有唯一的一个编号，也就是Unicode号，用它就可以不管编码的事儿了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">s = u<span class="string">"中文"</span></span><br><span class="line"><span class="built_in">print</span> s</span><br><span class="line"><span class="built_in">print</span> repr(s)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/424/083/4240835891-5bcc65b1ad460_articlex" alt="如图所示"></p><h3 id="3-3-把中文强制转换为GBK或者unicode编码"><a href="#3-3-把中文强制转换为GBK或者unicode编码" class="headerlink" title="3.3 把中文强制转换为GBK或者unicode编码"></a>3.3 把中文强制转换为GBK或者unicode编码</h3><p>强制转换为unicode编码，在 Python 中编码是可以互相转换的，比如从utf-8转换为gbk，不同编码之间不能直接转换，需要通过unicode字符集中间过渡下，从上面基础知识可知unicode是一种字符集，不属于编码，而utf-8是具体实现unicode思想的一种编码。utf-8转换为unicode是一种解码过程，通过decode可从utf-8解码成unicode。这儿也就解释了为什么上面我说叫Unicode号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">s = <span class="string">"中文"</span></span><br><span class="line">u = s.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="built_in">print</span> u</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(u)</span><br><span class="line"><span class="built_in">print</span> repr(u)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/321/546/3215465892-5bcc668b250d4_articlex" alt="如图所示"></p><p>强制转换为gbk编码，上一步已经从utf-8转换为unicode了，从unicode是编码的过程，通过encode实现</p><p><img src="https://image-static.segmentfault.com/412/466/4124666716-5bcc66dd475a2_articlex" alt="如图所示">))</p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h2><p>windows cmd 窗口下不支持utf-8，想要显示中文必须转换为gbk或者unicode，而 Python idle 中这三种编码都支持。中文乱码的出现都是由于编码不一致导致的，存储的是用utf-8，打印的时候用gbk就会乱码了，所有要保证不乱码尽量保持统一，建议全部使用unicode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件存储为utf-8格式，编码声明为utf-8，<span class="comment"># coding:utf-8</span></span><br><span class="line">出现汉字的地方前面加 u，转换成Unicode号</span><br><span class="line">不同编码之间不能直接转换，要经过unicode中间跳转</span><br><span class="line">cmd 下不支持utf-8编码</span><br><span class="line">raw_input提示字符串只能为gbk编码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;声明：文章借鉴自【彻底搞懂 python 中文乱码问题】&lt;/p&gt;
&lt;h2 id=&quot;一-各种编码的由来&quot;&gt;&lt;a href=&quot;#一-各种编码的由来&quot; class=&quot;headerlink&quot; title=&quot;一. 各种编码的由来&quot;&gt;&lt;/a&gt;一. 各种编码的由来&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>爬虫中储存到文件夹的方法</title>
    <link href="http://hezhenyun.github.io/2019/12/04/os%E6%A8%A1%E5%9D%97/"/>
    <id>http://hezhenyun.github.io/2019/12/04/os%E6%A8%A1%E5%9D%97/</id>
    <published>2019-12-04T13:57:57.972Z</published>
    <updated>2019-12-04T13:57:38.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1.创建文件夹"></a>1.创建文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filetitle = os.path.join(os.curdir, <span class="string">'reads'</span>)</span><br><span class="line">建立文件夹，os.curdir(为当地地址)，创建语法为os.path.jion, <span class="string">'reads'</span>为文件夹的名称</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(fileread):</span><br><span class="line">    os.mkdir(fileread)</span><br><span class="line">os.path.isdir用来判断此文件夹是否存在，不存在则重新建立，建立方法为os.mkdir()</span><br></pre></td></tr></table></figure><h2 id="2-文件夹中文件的名称"><a href="#2-文件夹中文件的名称" class="headerlink" title="2.文件夹中文件的名称"></a>2.文件夹中文件的名称</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = i + <span class="string">'.txt'</span>  <span class="comment"># 每个文件的名字</span></span><br><span class="line">filename为传递的变量，i 为所选择的文件名，后缀为.txt</span><br></pre></td></tr></table></figure><h2 id="3-把文件存放在文件夹中"><a href="#3-把文件存放在文件夹中" class="headerlink" title="3.把文件存放在文件夹中"></a>3.把文件存放在文件夹中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filepath = os.path.join(filetitle, filename)     <span class="comment"># 把每个文件都放在filetitle文件夹里</span></span><br></pre></td></tr></table></figure><p>此处使用路径连接  ()里为文件夹变量以及文件名变量</p><p>最后写入并进行保存就OK了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建文件夹&quot;&gt;&lt;a href=&quot;#1-创建文件夹&quot; class=&quot;headerlink&quot; title=&quot;1.创建文件夹&quot;&gt;&lt;/a&gt;1.创建文件夹&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python strip()方法</title>
    <link href="http://hezhenyun.github.io/2019/12/02/strip%E6%96%B9%E6%B3%95/"/>
    <id>http://hezhenyun.github.io/2019/12/02/strip%E6%96%B9%E6%B3%95/</id>
    <published>2019-12-02T04:52:30.127Z</published>
    <updated>2019-12-02T04:52:12.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>strip()方法语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.strip([chars]);</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>chars – 移除字符串头尾指定的字符序列。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回移除字符串头尾指定的字符生成的新字符串。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例展示了strip()函数的使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"00000003210Runoob01230000000"</span>; </span><br><span class="line"><span class="built_in">print</span> str.strip( <span class="string">'0'</span> );  <span class="comment"># 去除首尾字符 0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">str2 = <span class="string">"   Runoob      "</span>;   <span class="comment"># 去除首尾空格</span></span><br><span class="line"><span class="built_in">print</span> str2.strip();</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3210Runoob0123</span><br><span class="line">Runoob</span><br></pre></td></tr></table></figure><p>从结果上看，可以注意到中间部分的字符并未删除。</p><p>以上下例演示了只要头尾包含有指定字符序列中的字符就删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"123abcrunoob321"</span></span><br><span class="line"><span class="built_in">print</span> (str.strip( <span class="string">'12'</span> ))  <span class="comment"># 字符序列为 12</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3abcrunoob3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Beautiful Soup基础</title>
    <link href="http://hezhenyun.github.io/2019/11/30/bs4/"/>
    <id>http://hezhenyun.github.io/2019/11/30/bs4/</id>
    <published>2019-11-30T12:52:01.611Z</published>
    <updated>2019-11-30T12:51:31.784Z</updated>
    
    <content type="html"><![CDATA[<p>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.</p><p>下面下面的一段HTML代码将作为例子被多次用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="</span>title<span class="string">"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="</span>story<span class="string">"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="</span>http://example.com/elsie<span class="string">" class="</span>sister<span class="string">" id="</span>link1<span class="string">"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="</span>http://example.com/lacie<span class="string">" class="</span>sister<span class="string">" id="</span>link2<span class="string">"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="</span>http://example.com/tillie<span class="string">" class="</span>sister<span class="string">" id="</span>link3<span class="string">"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="</span>story<span class="string">"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure><p>几个简单的浏览结构化数据的方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">soup.title</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">soup.title.name</span><br><span class="line"><span class="comment"># u'title'</span></span><br><span class="line"></span><br><span class="line">soup.title.string</span><br><span class="line"><span class="comment"># u'The Dormouse's story'</span></span><br><span class="line"></span><br><span class="line">soup.title.parent.name</span><br><span class="line"><span class="comment"># u'head'</span></span><br><span class="line"></span><br><span class="line">soup.p</span><br><span class="line"><span class="comment"># &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">'class'</span>]</span><br><span class="line"><span class="comment"># u'title'</span></span><br><span class="line"></span><br><span class="line">soup.a</span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(id=<span class="string">"link3"</span>)</span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>从文档中找到所有<a>标签的链接:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">'href'</span>))</span><br><span class="line">    <span class="comment"># http://example.com/elsie</span></span><br><span class="line">    <span class="comment"># http://example.com/lacie</span></span><br><span class="line">    <span class="comment"># http://example.com/tillie</span></span><br></pre></td></tr></table></figure><p>从文档中获取所有文字内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.get_text())</span><br><span class="line"><span class="comment"># The Dormouse's story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Dormouse's story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="comment"># Elsie,</span></span><br><span class="line"><span class="comment"># Lacie and</span></span><br><span class="line"><span class="comment"># Tillie;</span></span><br><span class="line"><span class="comment"># and they lived at the bottom of a well.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>这是你想要的吗?别着急,还有更好用的</p><h2 id="使用lxml解析器"><a href="#使用lxml解析器" class="headerlink" title="使用lxml解析器"></a>使用lxml解析器</h2><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>将一段文档传入BeautifulSoup 的构造方法,就能得到一个文档的对象, 可以传入一段字符串或一个文件句柄.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">"index.html"</span>))</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(<span class="string">"&lt;html&gt;data&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure><p>首先,文档被转换成Unicode,并且HTML的实例都被转换成Unicode编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BeautifulSoup(<span class="string">"Sacr&amp;eacute; bleu!"</span>)</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Sacré bleu!&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后,Beautiful Soup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful Soup会选择指定的解析器来解析文档.(参考 解析成XML ).</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>可以去Beautiful Soup官网去学习<br><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/" target="_blank" rel="noopener">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.&lt;/p&gt;
&lt;p&gt;下面下面的一段HTML代码将作为例子被
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>xpath语法</title>
    <link href="http://hezhenyun.github.io/2019/11/28/xpath/"/>
    <id>http://hezhenyun.github.io/2019/11/28/xpath/</id>
    <published>2019-11-28T13:27:23.310Z</published>
    <updated>2019-11-28T13:27:01.397Z</updated>
    
    <content type="html"><![CDATA[<p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><h2 id="XML-实例文档"><a href="#XML-实例文档" class="headerlink" title="XML 实例文档"></a>XML 实例文档</h2><p>我们将在下面的例子中使用这个 XML 文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line">  &lt;title lang=<span class="string">"eng"</span>&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">  &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">&lt;/book&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line">  &lt;title lang=<span class="string">"eng"</span>&gt;Learning XML&lt;/title&gt;</span><br><span class="line">  &lt;price&gt;39.95&lt;/price&gt;</span><br><span class="line">&lt;/book&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure><h2 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h2><p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</p><h3 id="表达式-描述"><a href="#表达式-描述" class="headerlink" title="表达式                 描述"></a>表达式                 描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodename     选取此节点的所有子节点。</span><br><span class="line">/             从根节点选取。</span><br><span class="line">// 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</span><br><span class="line">. 选取当前节点。</span><br><span class="line">.. 选取当前节点的父节点。</span><br><span class="line">@ 选取属性。</span><br></pre></td></tr></table></figure><p>在下面中，我们已列出了一些路径表达式以及表达式的结果：</p><h3 id="路径表达式-结果"><a href="#路径表达式-结果" class="headerlink" title="路径表达式             结果"></a>路径表达式             结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bookstore 选取 bookstore 元素的所有子节点。</span><br><span class="line">/bookstore 选取根元素 bookstore。</span><br><span class="line"></span><br><span class="line">注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</span><br><span class="line"></span><br><span class="line">bookstore/book 选取属于 bookstore 的子元素的所有 book 元素。</span><br><span class="line">//book 选取所有 book 子元素，而不管它们在文档中的位置。</span><br><span class="line">bookstore//book 选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</span><br><span class="line">//@lang 选取名为 lang 的所有属性。</span><br></pre></td></tr></table></figure><h2 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h2><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><p>在下面中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><h2 id="路径表达式-结果-1"><a href="#路径表达式-结果-1" class="headerlink" title="路径表达式                                    结果"></a>路径表达式                                    结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/bookstore/book[1]选取属于 bookstore 子元素的第一个 book 元素。</span><br><span class="line">/bookstore/book[last()]选取属于 bookstore 子元素的最后一个 book 元素。</span><br><span class="line">/bookstore/book[last()-1]选取属于 bookstore 子元素的倒数第二个 book 元素。</span><br><span class="line">/bookstore/book[position()&lt;3]选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</span><br><span class="line">//title[@lang]选取所有拥有名为 lang 的属性的 title 元素。</span><br><span class="line">//title[@lang=<span class="string">'eng'</span>]选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</span><br><span class="line">/bookstore/book[price&gt;35.00]选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</span><br><span class="line">/bookstore/book[price&gt;35.00]/title选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</span><br></pre></td></tr></table></figure><h2 id="选取未知节点"><a href="#选取未知节点" class="headerlink" title="选取未知节点"></a>选取未知节点</h2><p>XPath 通配符可用来选取未知的 XML 元素。</p><h3 id="通配符-描述"><a href="#通配符-描述" class="headerlink" title="通配符        描述"></a>通配符        描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*匹配任何元素节点。</span><br><span class="line">@*匹配任何属性节点。</span><br><span class="line">node()匹配任何类型的节点。</span><br></pre></td></tr></table></figure><p>在下面中，我们列出了一些路径表达式，以及这些表达式的结果：</p><h3 id="路径表达式-结果-2"><a href="#路径表达式-结果-2" class="headerlink" title="路径表达式                结果"></a>路径表达式                结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bookstore/*选取 bookstore 元素的所有子元素。</span><br><span class="line">//*选取文档中的所有元素。</span><br><span class="line">//title[@*]选取所有带有属性的 title 元素。</span><br></pre></td></tr></table></figure><h2 id="选取若干路径"><a href="#选取若干路径" class="headerlink" title="选取若干路径"></a>选取若干路径</h2><p>通过在路径表达式中使用”|”运算符，您可以选取若干个路径。</p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><h3 id="路径表达式-结果-3"><a href="#路径表达式-结果-3" class="headerlink" title="路径表达式                         结果"></a>路径表达式                         结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//book/title | //book/price选取 book 元素的所有 title 和 price 元素。</span><br><span class="line">//title | //price选取文档中的所有 title 和 price 元素。</span><br><span class="line">/bookstore/book/title | //price选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>菜鸟教程：<a href="https://www.runoob.com/xpath/xpath-syntax.html" target="_blank" rel="noopener">https://www.runoob.com/xpath/xpath-syntax.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。&lt;/p&gt;
&lt;h2 id=&quot;XML-实例文档&quot;&gt;&lt;a href=&quot;#XML-实例文档&quot; class=&quot;headerlink&quot; title=&quot;XM
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>利用正则和爬虫知识爬取网站</title>
    <link href="http://hezhenyun.github.io/2019/11/26/%E6%AD%A3%E5%88%99%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
    <id>http://hezhenyun.github.io/2019/11/26/%E6%AD%A3%E5%88%99%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</id>
    <published>2019-11-26T06:01:39.069Z</published>
    <updated>2019-11-26T06:19:22.719Z</updated>
    
    <content type="html"><![CDATA[<p>以下是自己在学习爬虫时，利用正则和爬虫知识爬取豆瓣电影排行榜的一些总结，仅供参考，如有不足，还请关照</p><h2 id="1-请求"><a href="#1-请求" class="headerlink" title="1.请求"></a>1.请求</h2><pre><code>在爬取网站是，首先就是先要发送自己的请求，看能不能访问到此网站，在这，我便以爬取豆瓣电影排行榜为例。</code></pre><p>在向豆瓣网站发送请求时，要添加一下自定义的headers,如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$  headers = &#123;</span><br><span class="line">$            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\</span></span><br><span class="line"><span class="string">$                    537.36 (KHTML, like Gecko) Chrome/\</span></span><br><span class="line"><span class="string">$                    78.0.3904.70 Safari/537.36'</span></span><br><span class="line">$        &#125;</span><br></pre></td></tr></table></figure><p>在这里发送请求我用的是Requests,对于接触过爬虫的都会了解这个，我便不多说了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>这里的url指的就是所要爬取的网站的网址。</p><p>下面是一个完整的请求，用一个函数来概括。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$def get__one__page(url):</span><br><span class="line">$try:</span><br><span class="line">$headers = &#123;</span><br><span class="line">$<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\</span></span><br><span class="line"><span class="string">$537.36 (KHTML, like Gecko) Chrome/\</span></span><br><span class="line"><span class="string">$78.0.3904.70 Safari/537.36'</span></span><br><span class="line">$&#125;</span><br><span class="line">$response = requests.get(url, headers=headers)</span><br><span class="line">$<span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">$<span class="built_in">return</span> response.text</span><br><span class="line">$<span class="built_in">return</span> None</span><br><span class="line">$except RequestException:</span><br><span class="line">$<span class="built_in">return</span> None</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>在这里我用的是返回的响应码来做一个判断，当请求成功是返回的就是200，错误就会直接返回None,这里运用了一个异常判断来处理</p><h2 id="2-解析"><a href="#2-解析" class="headerlink" title="2.解析"></a>2.解析</h2><p>在请求成功后，会返回对应网址的一些代码信息，这里就需要去解析这些代码信息，整理出来我们所需要的的数据信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$def parse__one__page(html):</span><br><span class="line">$pattern = re.compile(</span><br><span class="line">$    <span class="string">'&lt;li&gt;.*?class=""&gt;(\d+)&lt;.*?src="(.*?)".*?&gt;.*?title"&gt;(.*?)&lt;.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;br&gt;.*?&lt;/p&gt;.*?average"&gt;(.*?)&lt;.*?&lt;/li&gt;'</span>,</span><br><span class="line">$re.S)</span><br><span class="line">$</span><br><span class="line">$items = re.findall(pattern, html)</span><br><span class="line">$<span class="comment"># print(items)</span></span><br><span class="line">$<span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">$yield &#123;</span><br><span class="line">$<span class="string">'index'</span>: item[0],</span><br><span class="line">$<span class="string">'image'</span>: item[1],</span><br><span class="line">$<span class="string">'title'</span>: item[2],</span><br><span class="line">$<span class="string">'director'</span>: item[3],</span><br><span class="line">$<span class="string">'score'</span>: item[4]</span><br><span class="line">$&#125;</span><br></pre></td></tr></table></figure><p>以上解析用的是正则表达式的知识来进行的，（如果对正则知识不熟练的可以参考我的另一篇文章），利用正则解析过，能够得到我们想要的信息后，会感觉还是比较乱，那么就要用到for循环迭代器了，进行有序的输出，使自己想要的数据信息更加清楚明白。</p><h2 id="3-读入文件中"><a href="#3-读入文件中" class="headerlink" title="3.读入文件中"></a>3.读入文件中</h2><p>在以上我们得到自己想要的信息后就要存放到本地的文件中，便于自己的浏览和使用，所以就要用到文件的知识了，这里就不多说了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$def write__one__page(content):</span><br><span class="line">$with open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) as f:</span><br><span class="line">$f.write(json.dumps(content, ensure_ascii=False))</span><br><span class="line">$f.write(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>读入文件后，打开本地的文本文件，就可以显示了，好了就到这了。</p><h2 id="主代码"><a href="#主代码" class="headerlink" title="主代码"></a>主代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$def main(number):</span><br><span class="line">$url = <span class="string">'https://movie.douban.com/top250?start='</span> + number + <span class="string">'&amp;filter='</span> + str(number)</span><br><span class="line">$html = get__one__page(url)</span><br><span class="line">$<span class="comment"># parse__one__page(html)</span></span><br><span class="line">$<span class="comment"># print(html)</span></span><br><span class="line">$<span class="keyword">for</span> item <span class="keyword">in</span> parse__one__page(html):</span><br><span class="line">$<span class="built_in">print</span>(item)</span><br><span class="line">$write__one__page(item)</span><br><span class="line">$</span><br><span class="line">$</span><br><span class="line">$<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">$<span class="keyword">for</span> i <span class="keyword">in</span> range(10):</span><br><span class="line">$main(number=str(i * 25))</span><br><span class="line">$time.sleep(1)</span><br><span class="line">$<span class="comment"># main()</span></span><br></pre></td></tr></table></figure><h2 id="阐述"><a href="#阐述" class="headerlink" title="阐述"></a>阐述</h2><p>以上仅是自我的总结，仅供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下是自己在学习爬虫时，利用正则和爬虫知识爬取豆瓣电影排行榜的一些总结，仅供参考，如有不足，还请关照&lt;/p&gt;
&lt;h2 id=&quot;1-请求&quot;&gt;&lt;a href=&quot;#1-请求&quot; class=&quot;headerlink&quot; title=&quot;1.请求&quot;&gt;&lt;/a&gt;1.请求&lt;/h2&gt;&lt;pre&gt;&lt;c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Requests的基本用法</title>
    <link href="http://hezhenyun.github.io/2019/11/24/requests%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://hezhenyun.github.io/2019/11/24/requests%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2019-11-24T05:09:56.014Z</published>
    <updated>2019-11-24T05:09:40.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Requests"><a href="#什么是Requests" class="headerlink" title="什么是Requests"></a>什么是Requests</h2><p>Requests是Python语言编写，基于urllib3，采用Apache2 Licensed开源协议的HTTP库。它比urllib更加方便，可以节约我们大量的工作，完全满足HTTP测试需求。是Python实现的简单易用的HTTP库。</p><p>安装也很简单：</p><h3 id="pip3进行安装"><a href="#pip3进行安装" class="headerlink" title="pip3进行安装"></a>pip3进行安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install requests</span><br></pre></td></tr></table></figure><h2 id="Request的语法操作"><a href="#Request的语法操作" class="headerlink" title="Request的语法操作"></a>Request的语法操作</h2><h3 id="1-实例引入"><a href="#1-实例引入" class="headerlink" title="1.实例引入"></a>1.实例引入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ 1import requests</span><br><span class="line">$ response = requests.get( http://www.baidu.com/ )</span><br><span class="line">$ <span class="built_in">print</span>(response.status_code)</span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.text))</span><br><span class="line">$ <span class="built_in">print</span>(response.text)</span><br><span class="line">$ <span class="built_in">print</span>(response.cookies)</span><br><span class="line">$</span><br><span class="line">$ 200</span><br><span class="line">$ &lt;class  str &gt;</span><br><span class="line">$</span><br><span class="line">$ <span class="comment"># ...HTML网页源码..</span></span><br><span class="line">$ &lt;RequestsCookieJar[]&gt;<span class="string">"</span></span><br></pre></td></tr></table></figure><h3 id="2-各种请求方式"><a href="#2-各种请求方式" class="headerlink" title="2.各种请求方式"></a>2.各种请求方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ requests.get( http://httpbin.org/get ) <span class="comment"># 发送get请求</span></span><br><span class="line">$ requests.post( http://httpbin.org/post ) <span class="comment"># 发送post请求，只要调用post方法，传入一个url参数</span></span><br><span class="line">$ requests.put( http://httpbin.org/put )</span><br><span class="line">$ requests.delete( http://httpbin.org/delete )</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="1-基本GET请求"><a href="#1-基本GET请求" class="headerlink" title="1.基本GET请求"></a>1.基本GET请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$ </span><br><span class="line">$ resp = requests.get( http://httpbin.org/get )</span><br><span class="line">$ <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h3 id="2-带参数的GET请求这个我们前面有使用过，也是最常用的方法。运行成功就可以看到网页的源码了"><a href="#2-带参数的GET请求这个我们前面有使用过，也是最常用的方法。运行成功就可以看到网页的源码了" class="headerlink" title="2.带参数的GET请求这个我们前面有使用过，也是最常用的方法。运行成功就可以看到网页的源码了"></a>2.带参数的GET请求这个我们前面有使用过，也是最常用的方法。运行成功就可以看到网页的源码了</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ data = &#123;</span><br><span class="line">$    name  :  jack ,</span><br><span class="line">$    age  : 20</span><br><span class="line">$ &#125;</span><br><span class="line">$ resp = requests.get( http://httpbin.org/get , params=data)</span><br><span class="line">$ <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h3 id="3-解析json传入参数只需要我们把数据生成一个字典，然后调用params参数，赋值给他就可以，是不是很方便。"><a href="#3-解析json传入参数只需要我们把数据生成一个字典，然后调用params参数，赋值给他就可以，是不是很方便。" class="headerlink" title="3.解析json传入参数只需要我们把数据生成一个字典，然后调用params参数，赋值给他就可以，是不是很方便。"></a>3.解析json传入参数只需要我们把数据生成一个字典，然后调用params参数，赋值给他就可以，是不是很方便。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$ import json</span><br><span class="line">$</span><br><span class="line">$ resp = requests.get( http://httpbin.org/get )</span><br><span class="line">$ <span class="built_in">print</span>(resp.text)</span><br><span class="line">$ <span class="built_in">print</span>(resp.json())</span><br><span class="line">$ <span class="built_in">print</span>(json.loads(resp.text))</span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(resp.json()))</span><br></pre></td></tr></table></figure><p>可以看出Requests的jaon解析和json的loads方法解析出来的结果是完全一样的。所以Requests可以很方便的解析json数据。</p><h3 id="4-获取二进制数据"><a href="#4-获取二进制数据" class="headerlink" title="4.获取二进制数据"></a>4.获取二进制数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ resp = requests.get( http://www.baidu.com/img/baidu_jgylogo3.gif )</span><br><span class="line">$ <span class="built_in">print</span>(resp.content)</span><br><span class="line">$ <span class="built_in">print</span>(resp.text)</span><br><span class="line">$ </span><br><span class="line">$ with open( logo.gif , wb ) as f:</span><br><span class="line">$    f.write(resp.content)</span><br></pre></td></tr></table></figure><p>运行成功我们可以看到content方法获取的图片页面源码是二进制数据，而text获取的则是字符串代码。显然获取图片这种二进制数据需要使用content方法。这样我们就保存了图片，我们可以在文件夹下看到这张图片。</p><h3 id="5-添加headers"><a href="#5-添加headers" class="headerlink" title="5.添加headers"></a>5.添加headers</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ headers = &#123; User-Agent : Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 &#125;</span><br><span class="line">$ resp = requests.get( http://www.baidu.com , headers=headers)</span><br><span class="line">$ <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>有些网页如果我们直接去请求的话，他会查看请求的对象是不是浏览器，如果没有浏览器信息就会禁止我们爬虫的访问，这个时候我们就要给爬虫加一个headers，加一个浏览器的user-agent信息。这样我们就可以正常访问了。如果有的伙伴不知道怎么得到User-Agent，可以打开浏览器的审查元素，找到network，随便点击一个链接就可以看到User-Agent的信息了。</p><h3 id="6-基本POST请求"><a href="#6-基本POST请求" class="headerlink" title="6.基本POST请求"></a>6.基本POST请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ data = &#123;</span><br><span class="line">$    name  :  jack ,</span><br><span class="line">$    age  : 20</span><br><span class="line">$ &#125;</span><br><span class="line">$ resp = requests.post( http://httpbin.org/post , data=data)</span><br><span class="line">$ <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>一个POST必然是要有一个Form Data的表单提交的，我们只要把信息传给data参数就可以了。一个POST请求只需要调用post方法，是不是特别方便呢。如果不觉得方便的话，可以去参考urllib的使用方法。</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="1-response属性"><a href="#1-response属性" class="headerlink" title="1.response属性"></a>1.response属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ response = requests.get( http://www.baidu.com/ )</span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.status_code)) <span class="comment"># 状态码</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.text)) <span class="comment"># 网页源码</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.headers)) <span class="comment"># 头部信息</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies)) <span class="comment"># Cookie</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.url)) <span class="comment"># 请求的url</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="built_in">type</span>(response.history)) <span class="comment"># 访问的历史记录</span></span><br></pre></td></tr></table></figure><h3 id="2-状态码判断获取这些信息只需要简单的调用就可以实现了。"><a href="#2-状态码判断获取这些信息只需要简单的调用就可以实现了。" class="headerlink" title="2.状态码判断获取这些信息只需要简单的调用就可以实现了。"></a>2.状态码判断获取这些信息只需要简单的调用就可以实现了。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ import requests</span><br><span class="line">$</span><br><span class="line">$ response = requests.get( http://www.baidu.com/ )</span><br><span class="line">$ <span class="built_in">exit</span>() <span class="keyword">if</span> not resp.status_code == 200 <span class="keyword">else</span> <span class="built_in">print</span>( Sucessful )</span><br><span class="line">$ Sucessful</span><br><span class="line">$ </span><br><span class="line">$ <span class="comment">#如果发送了一个错误请求(一个4XX客户端错误，或者5XX服务器错误响应)，我们可以通过 Response.raise_for_status() 来抛出异常：</span></span><br><span class="line">$</span><br><span class="line">$ bad_r = requests.get( http://httpbin.org/status/404 )</span><br><span class="line">$ bad_r.status_code</span><br><span class="line">$ 404</span><br><span class="line">$ </span><br><span class="line">$ bad_r.raise_for_status()</span><br><span class="line">$ Traceback (most recent call last):</span><br><span class="line">$  File <span class="string">"requests/models.py"</span>, line 832, <span class="keyword">in</span> raise_for_status</span><br><span class="line">$    raise http_error</span><br><span class="line">$ requests.exceptions.HTTPError: 404 Client Error</span><br></pre></td></tr></table></figure><p>好了，这篇文章我们了解了Requests库的基本语法操作，相信大家对Requests库的请求和响应已经很清楚了，大家完全可以抓取一些网页了。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.csdn.net/qq_28168421/article/details/89530073" target="_blank" rel="noopener">https://blog.csdn.net/qq_28168421/article/details/89530073</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Requests&quot;&gt;&lt;a href=&quot;#什么是Requests&quot; class=&quot;headerlink&quot; title=&quot;什么是Requests&quot;&gt;&lt;/a&gt;什么是Requests&lt;/h2&gt;&lt;p&gt;Requests是Python语言编写，基于urllib3，采用Ap
      
    
    </summary>
    
    
    
      <category term="爬虫" scheme="http://hezhenyun.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://hezhenyun.github.io/tags/python/"/>
    
      <category term="requests" scheme="http://hezhenyun.github.io/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Python2.x与3​​.x版本区别</title>
    <link href="http://hezhenyun.github.io/2019/11/22/python%E7%89%88%E6%9C%AC/"/>
    <id>http://hezhenyun.github.io/2019/11/22/python%E7%89%88%E6%9C%AC/</id>
    <published>2019-11-22T04:37:57.548Z</published>
    <updated>2019-11-22T04:41:33.153Z</updated>
    
    <content type="html"><![CDATA[<p>Python的3​​.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。</p><p>为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下相容。</p><p>许多针对早期Python版本设计的程式都无法在Python 3.0上正常执行。</p><p>为了照顾现有程式，Python 2.6作为一个过渡版本，基本使用了Python 2.x的语法和库，同时考虑了向Python 3.0的迁移，允许使用部分Python 3.0的语法与函数。</p><p>新的Python程式建议使用Python 3.0版本的语法。</p><p>除非执行环境无法安装Python 3.0或者程式本身使用了不支援Python 3.0的第三方库。目前不支援Python 3.0的第三方库有Twisted, py2exe, PIL等。</p><p>大多数第三方库都正在努力地相容Python 3.0版本。即使无法立即使用Python 3.0，也建议编写相容Python 3.0版本的程式，然后使用Python 2.6, Python 2.7来执行。</p><p>Python 3.0的变化主要在以下几个方面:</p><h2 id="print-函数"><a href="#print-函数" class="headerlink" title="print 函数"></a>print 函数</h2><p>print语句没有了，取而代之的是print()函数。 Python 2.6与Python 2.7部分地支持这种形式的print语法。在Python 2.6与Python 2.7里面，以下三种形式是等价的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span> <span class="string">"fish"</span></span><br><span class="line">$ <span class="built_in">print</span> (<span class="string">"fish"</span>) <span class="comment">#注意print后面有个空格</span></span><br><span class="line">$ <span class="built_in">print</span>(<span class="string">"fish"</span>) <span class="comment">#print()不能带有任何其它参数</span></span><br></pre></td></tr></table></figure><p>然而，Python 2.6实际已经支持新的print()语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ from __future__ import print_function</span><br><span class="line">$ <span class="built_in">print</span>(<span class="string">"fish"</span>, <span class="string">"panda"</span>, sep=<span class="string">', '</span>)</span><br></pre></td></tr></table></figure><h2 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h2><p>Python中的除法较其它语言显得非常高端，有套很复杂的规则。Python中的除法有两个运算符，/和//</p><p>首先来说/除法:</p><p>在python 2.x中/除法就跟我们熟悉的大多数语言，比如Java啊C啊差不多，整数相除的结果是一个整数，把小数部分完全忽略掉，浮点数除法会保留小数点的部分得到一个浮点数的结果。</p><p>在python 3.x中/除法不再这么做了，对于整数之间的相除，结果也会是浮点数。</p><h3 id="Python-2-x"><a href="#Python-2-x" class="headerlink" title="Python 2.x:"></a>Python 2.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; 1 / 2</span><br><span class="line">$ 0</span><br><span class="line">$ &gt;&gt;&gt; 1.0 / 2.0</span><br><span class="line">$ 0.5</span><br></pre></td></tr></table></figure><h3 id="Python-3-x"><a href="#Python-3-x" class="headerlink" title="Python 3.x:"></a>Python 3.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; 1/2</span><br><span class="line">$ 0.5</span><br></pre></td></tr></table></figure><p>而对于//除法，这种除法叫做floor除法，会对除法的结果自动进行一个floor操作，在python 2.x和python 3.x中是一致的。</p><h3 id="python-2-x"><a href="#python-2-x" class="headerlink" title="python 2.x:"></a>python 2.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; -1 // 2</span><br><span class="line">$ -1</span><br></pre></td></tr></table></figure><h3 id="python-3-x"><a href="#python-3-x" class="headerlink" title="python 3.x:"></a>python 3.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; -1 // 2</span><br><span class="line">$ -1</span><br></pre></td></tr></table></figure><p>注意的是并不是舍弃小数部分，而是执行 floor 操作，如果要截取整数部分，那么需要使用 math 模块的 trunc 函数</p><h3 id="python-3-x-1"><a href="#python-3-x-1" class="headerlink" title="python 3.x:"></a>python 3.x:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ &gt;&gt;&gt; import math</span><br><span class="line">$ &gt;&gt;&gt; math.trunc(1 / 2)</span><br><span class="line">$ 0</span><br><span class="line">$ &gt;&gt;&gt; math.trunc(-1 / 2)</span><br><span class="line">$ 0</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。</p><p>捕获异常的语法由 except exc, var 改为 except exc as var。</p><p>使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python 2.6已经支持这两种语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ 1.在2.x时代，所有类型的对象都是可以被直接抛出的，在3.x时代，只有继承自BaseException的对象才可以被抛出。</span><br><span class="line">$ 2.2.xraise语句使用逗号将抛出对象类型和参数分开，3.x取消了这种奇葩的写法，直接调用构造函数抛出对象即可。</span><br></pre></td></tr></table></figure><p>在2.x时代，异常在代码中除了表示程序错误，还经常做一些普通控制结构应该做的事情，在3.x中可以看出，设计者让异常变的更加专一，只有在错误发生的情况才能去用异常捕获语句来处理。</p><h2 id="xrange"><a href="#xrange" class="headerlink" title="xrange"></a>xrange</h2><p>在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。</p><p>这个表现十分像生成器（比如。”惰性求值”）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。</p><p>由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for 循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。</p><p>在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中 xrange() 会抛出命名异常）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import timeit</span><br><span class="line"></span><br><span class="line">n = 10000</span><br><span class="line">def test_range(n):</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">def test_xrange(n):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h3 id="Python-2"><a href="#Python-2" class="headerlink" title="Python 2"></a>Python 2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">'Python'</span>, python_version()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">'\ntiming range()'</span> </span><br><span class="line">%timeit test_range(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">'\n\ntiming xrange()'</span> </span><br><span class="line">%timeit test_xrange(n)</span><br><span class="line"></span><br><span class="line">Python 2.7.6</span><br><span class="line"></span><br><span class="line">timing range()</span><br><span class="line">1000 loops, best of 3: 433 µs per loop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timing xrange()</span><br><span class="line">1000 loops, best of 3: 350 µs per loop</span><br></pre></td></tr></table></figure><h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'Python'</span>, python_version())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'\ntiming range()'</span>)</span><br><span class="line">%timeit test_range(n)</span><br><span class="line"></span><br><span class="line">Python 3.4.1</span><br><span class="line"></span><br><span class="line">timing range()</span><br><span class="line">1000 loops, best of 3: 520 µs per loop</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(xrange(10))</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-5-5d8f9b79ea70&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 <span class="built_in">print</span>(xrange(10))</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'xrange'</span> is not defined</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>菜鸟教程<br><a href="https://www.runoob.com/python/python-2x-3x.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-2x-3x.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python的3​​.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。&lt;/p&gt;
&lt;p&gt;为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下相容。&lt;/p&gt;
&lt;p&gt;许多针对早期Python版本设计的程式都无
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python爬虫基本原理</title>
    <link href="http://hezhenyun.github.io/2019/11/20/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://hezhenyun.github.io/2019/11/20/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</id>
    <published>2019-11-20T13:40:50.584Z</published>
    <updated>2019-11-20T13:44:50.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是爬虫"><a href="#一、什么是爬虫" class="headerlink" title="一、什么是爬虫"></a>一、什么是爬虫</h2><p>互联网比喻成一张网，每张网上的节点就是数据存储的地方；Python程序类似蜘蛛，到每个节点中抓取自己的猎物；爬虫是指：给网站发送请求，获取资源后解析并提取有用数据的程序</p><h2 id="二、爬虫的执行流程"><a href="#二、爬虫的执行流程" class="headerlink" title="二、爬虫的执行流程"></a>二、爬虫的执行流程</h2><p>发送请求，获得数据（以图片，视频，js，css的形式），解析数据，存入数据库或文件中</p><h3 id="爬虫执行流程"><a href="#爬虫执行流程" class="headerlink" title="爬虫执行流程"></a>爬虫执行流程</h3><h3 id="1、发送请求request"><a href="#1、发送请求request" class="headerlink" title="1、发送请求request"></a>1、发送请求request</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用http库向目标站点发起请求，即发送一个Request</span><br><span class="line"></span><br><span class="line">Request包含：请求头、请求体等 </span><br><span class="line"></span><br><span class="line">Request模块缺陷：不能执行JS 和CSS 代码</span><br></pre></td></tr></table></figure><h3 id="2、获取响应内容-response"><a href="#2、获取响应内容-response" class="headerlink" title="2、获取响应内容 response"></a>2、获取响应内容 response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果服务器能正常响应，则会得到一个Response</span><br><span class="line"></span><br><span class="line">Response包含：html，json，图片，视频等</span><br></pre></td></tr></table></figure><h3 id="3、解析内容"><a href="#3、解析内容" class="headerlink" title="3、解析内容"></a>3、解析内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">解析html数据：正则表达式（RE模块），第三方解析库如Beautifulsoup，pyquery等</span><br><span class="line"></span><br><span class="line">解析json数据：json模块</span><br><span class="line"></span><br><span class="line">解析二进制数据:以wb的方式写入文件</span><br><span class="line"></span><br><span class="line">请求头需要注意的参数：</span><br><span class="line"></span><br><span class="line">（1）Referrer：访问源至哪里来（一些大型网站，会通过Referrer 做防盗链策略；所有爬虫也要注意模拟）</span><br><span class="line"></span><br><span class="line">（2）User-Agent:访问的浏览器（要加上否则会被当成爬虫程序）</span><br><span class="line"></span><br><span class="line">（3）cookie：请求头注意携带</span><br></pre></td></tr></table></figure><h3 id="4、请求体"><a href="#4、请求体" class="headerlink" title="4、请求体"></a>4、请求体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请求体</span><br><span class="line"></span><br><span class="line">如果是get方式，请求体没有内容（get请求的请求体放在 url后面参数中，直接能看到）</span><br><span class="line"></span><br><span class="line">如果是post方式，请求体是format data</span><br><span class="line"></span><br><span class="line">    ps：</span><br><span class="line"></span><br><span class="line">    1、登录窗口，文件上传等，信息都会被附加到请求体内</span><br><span class="line"></span><br><span class="line">2、登录，输入错误的用户名密码，然后提交，就可以看到post，正确登录后页面通常会跳转，无法捕捉到post</span><br></pre></td></tr></table></figure><h3 id="五、响应Response"><a href="#五、响应Response" class="headerlink" title="五、响应Response"></a>五、响应Response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、响应状态码</span><br><span class="line"></span><br><span class="line">　　200：代表成功</span><br><span class="line"></span><br><span class="line">　　301：代表跳转</span><br><span class="line"></span><br><span class="line">　　404：文件不存在</span><br><span class="line"></span><br><span class="line">　　403：无权限访问</span><br><span class="line"></span><br><span class="line">　　502：服务器错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、respone header</span><br><span class="line"></span><br><span class="line">响应头需要注意的参数：</span><br><span class="line"></span><br><span class="line">（1）Set-Cookie:BDSVRTM=0; path=/：可能有多个，是来告诉浏览器，把cookie保存下来</span><br><span class="line"></span><br><span class="line">（2）Content-Location：服务端响应头中包含Location返回浏览器之后，浏览器就会重新访问另一个页面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、preview就是网页源代码</span><br><span class="line"></span><br><span class="line">JSO数据</span><br><span class="line"></span><br><span class="line">如网页html，图片</span><br><span class="line"></span><br><span class="line">二进制数据等</span><br></pre></td></tr></table></figure><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、总结爬虫流程：</span><br><span class="line"></span><br><span class="line"> 爬取---&gt;解析---&gt;存储</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、爬虫所需工具：</span><br><span class="line"></span><br><span class="line">请求库：requests,selenium（可以驱动浏览器解析渲染CSS和JS，但有性能劣势（有用没用的网页都会加载）；） </span><br><span class="line"></span><br><span class="line">解析库：正则，beautifulsoup，pyquery </span><br><span class="line"></span><br><span class="line">存储库：文件，MySQL，Mongodb，Redis</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>作者：热心市民小蔡<br>链接：<a href="https://www.jianshu.com/p/2411490d6464" target="_blank" rel="noopener">https://www.jianshu.com/p/2411490d6464</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是爬虫&quot;&gt;&lt;a href=&quot;#一、什么是爬虫&quot; class=&quot;headerlink&quot; title=&quot;一、什么是爬虫&quot;&gt;&lt;/a&gt;一、什么是爬虫&lt;/h2&gt;&lt;p&gt;互联网比喻成一张网，每张网上的节点就是数据存储的地方；Python程序类似蜘蛛，到每个节点中抓取自己
      
    
    </summary>
    
    
    
      <category term="爬虫" scheme="http://hezhenyun.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://hezhenyun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式之python系列</title>
    <link href="http://hezhenyun.github.io/2019/11/18/python%E6%AD%A3%E5%88%99/"/>
    <id>http://hezhenyun.github.io/2019/11/18/python%E6%AD%A3%E5%88%99/</id>
    <published>2019-11-18T06:42:51.232Z</published>
    <updated>2019-11-21T01:12:24.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式的定义"><a href="#正则表达式的定义" class="headerlink" title="正则表达式的定义"></a>正则表达式的定义</h2><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。<br>10000 ~ 12数字组合<br>09876536</p><ol><li>长度</li><li>是否是0开头</li></ol><p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。</p><p>正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p>Regular Expression的“Regular”一般被译为“正则”、“正规”、“常规”。此处的“Regular”即是“规则”、“规律”的意思，Regular Expression即“描述某种规则的表达式”之意。<br>正则在所有语言中都有的内容。</p><h2 id="正则表达式的作用和特点"><a href="#正则表达式的作用和特点" class="headerlink" title="正则表达式的作用和特点"></a>正则表达式的作用和特点</h2><h3 id="给定一个正则表达式和另一个字符串，我们可以达到如下的目的："><a href="#给定一个正则表达式和另一个字符串，我们可以达到如下的目的：" class="headerlink" title="给定一个正则表达式和另一个字符串，我们可以达到如下的目的："></a>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</h3><ol><li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li></ol><h3 id="正则表达式的特点是："><a href="#正则表达式的特点是：" class="headerlink" title="正则表达式的特点是："></a>正则表达式的特点是：</h3><ol><li>灵活性、逻辑性和功能性非常强；</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。</li></ol><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>如何判断一个字符串是手机号呢？</p><p>判断邮箱为163或者126的所有邮件地址</p><p>假如你在写一个爬虫，你得到了一个网页的HTML源码。其中有一段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">你想要把这个hello world提取出来，但你这时如果只会python 的字符串处理，那么第一反应可能是</span><br><span class="line"></span><br><span class="line">$  s = <span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span></span><br><span class="line">$  start_index = s.find(<span class="string">'&lt;h1&gt;'</span>)</span><br></pre></td></tr></table></figure><h2 id="python-re模块："><a href="#python-re模块：" class="headerlink" title="python re模块："></a>python re模块：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\A：表示从字符串的开始处匹配</span><br><span class="line">\Z：表示从字符串的结束处匹配，如果存在换行，只匹配到换行前的结束字符串。</span><br><span class="line">\b：匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class="string">'py\b'</span> 可以匹配<span class="string">"python"</span> 中的 <span class="string">'py'</span>，但不能匹配 <span class="string">"openpyxl"</span> 中的 <span class="string">'py'</span>。</span><br><span class="line">\B：匹配非单词边界。 <span class="string">'py\b'</span> 可以匹配<span class="string">"openpyxl"</span> 中的 <span class="string">'py'</span>，但不能匹配<span class="string">"python"</span> 中的 <span class="string">'py'</span>。</span><br><span class="line">\d：匹配任意数字，等价于 [0-9]。  digit</span><br><span class="line">\D：匹配任意非数字字符，等价于 [^\d]。not digit</span><br><span class="line">\s：匹配任意空白字符，等价于 [\t\n\r\f]。 space</span><br><span class="line">\S：匹配任意非空白字符，等价于 [^\s]。</span><br><span class="line">\w：匹配任意字母数字及下划线，等价于[a-zA-Z0-9_]。</span><br><span class="line">\W：匹配任意非字母数字及下划线，等价于[^\w]</span><br><span class="line">\\：匹配原义的反斜杠\。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">‘.’用于匹配除换行符（\n）之外的所有字符。</span><br><span class="line">‘^’用于匹配字符串的开始，即行首。</span><br><span class="line">‘$’用于匹配字符串的末尾（末尾如果有换行符\n，就匹配\n前面的那个字符），即行尾。</span><br></pre></td></tr></table></figure><h3 id="定义正则验证次数："><a href="#定义正则验证次数：" class="headerlink" title="定义正则验证次数："></a>定义正则验证次数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">‘*’用于将前面的模式匹配0次或多次（贪婪模式，即尽可能多的匹配） &gt;=0</span><br><span class="line">‘+’用于将前面的模式匹配1次或多次（贪婪模式） &gt;=1    ‘？’用于将前面的模式匹配0次或1次（贪婪模式） 0 ，1</span><br><span class="line"><span class="string">'&#123;m&#125;'</span>  用于验证将前面的模式匹配m次</span><br><span class="line"><span class="string">'&#123;m,&#125;'</span>用于验证将前面的模式匹配m次或者多次  &gt;=m</span><br><span class="line"><span class="string">'&#123;m,n&#125;'</span>   用于验证将前面的模式匹配大于等于m次并且小于等于n次</span><br><span class="line"></span><br><span class="line">    ‘*？，+？，？？’即上面三种特殊字符的非贪婪模式（尽可能少的匹配）。</span><br><span class="line">    ‘&#123;m,n&#125;’用于将前面的模式匹配m次到n次（贪婪模式），即最小匹配m次，最大匹配n次。</span><br><span class="line">    ‘&#123;m,n&#125;？’即上面‘&#123;m,n&#125;’的非贪婪版本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">‘\\’：<span class="string">'\'</span>是转义字符，在特殊字符前面加上\，特殊字符就失去了其所代表的含义，比如\+就仅仅代表加号+本身。</span><br><span class="line">‘[]’用于标示一组字符，如果^是第一个字符，则标示的是一个补集。比如[0-9]表示所有的数字，[^0-9]表示除了数字外的字符。</span><br><span class="line">‘|’比如A|B用于匹配A或B。</span><br><span class="line">‘(...)’用于匹配括号中的模式，可以在字符串中检索或匹配我们所需要的内容。</span><br></pre></td></tr></table></figure><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪则相反，总是尝试匹配尽可能少的字符。</p><p>在”*”,”?”,”+”,”{m,n}”后面加上？，使贪婪变成非贪婪。</p><h2 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h2><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><h3 id="函数语法："><a href="#函数语法：" class="headerlink" title="函数语法："></a>函数语法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ re.match(pattern, string, flags=0)</span><br></pre></td></tr></table></figure><h3 id="函数参数说明"><a href="#函数参数说明" class="headerlink" title="函数参数说明"></a>函数参数说明</h3><p>：<br><strong>参数    描述</strong></p><p>pattern    匹配的正则表达式<br>string    要匹配的字符串。<br>flags    标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：正则表达式修饰符 - 可选标志<br>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p><p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><p><strong>匹配对象方法    描述</strong></p><p>group(num=0)    匹配的整个表达式的字符串，<br>group()   可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。<br>groups()    返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p><h2 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p><h3 id="函数语法：-1"><a href="#函数语法：-1" class="headerlink" title="函数语法："></a>函数语法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ re.search(pattern, string, flags=0)</span><br></pre></td></tr></table></figure><h3 id="函数参数说明："><a href="#函数参数说明：" class="headerlink" title="函数参数说明："></a>函数参数说明：</h3><p><strong>参数    描述</strong></p><p>pattern    匹配的正则表达式<br>string    要匹配的字符串。<br>flags    标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。<br>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p><p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><p><strong>匹配对象方法    描述</strong></p><p>group(num=0)    匹配的整个表达式的字符串，<br>group()  可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。<br>groups()    返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p><h2 id="re-match与re-search的区别"><a href="#re-match与re-search的区别" class="headerlink" title="re.match与re.search的区别"></a>re.match与re.search的区别</h2><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p><h2 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h2><p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ re.sub(pattern, repl, string, count=0, flags=0)</span><br></pre></td></tr></table></figure><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern : 正则中的模式字符串。</span><br><span class="line">repl : 替换的字符串，也可为一个函数。</span><br><span class="line">string : 要被查找替换的原始字符串。</span><br><span class="line">count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</span><br></pre></td></tr></table></figure><h2 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h2><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><p>注意： match 和 search 是匹配一次 findall 匹配所有。</p><h3 id="语法格式为："><a href="#语法格式为：" class="headerlink" title="语法格式为："></a>语法格式为：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure><p>###参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string : 待匹配的字符串。</span><br><span class="line">pos : 可选参数，指定字符串的起始位置，默认为 0。</span><br><span class="line">endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</span><br></pre></td></tr></table></figure><h2 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h2><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit=0, flags=0])</span><br></pre></td></tr></table></figure><h3 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h3><p><strong>参数    描述</strong></p><p>pattern     匹配的正则表达式<br>string     要匹配的字符串。<br>maxsplit    分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。<br>flags    标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：正则表达式修饰符 - 可选标志</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本篇文章仅阐述正则表达式的一些理论知识，便于记忆<br>若想要查看正则实例请于此地址浏览<a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-reg-expressions.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式的定义&quot;&gt;&lt;a href=&quot;#正则表达式的定义&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的定义&quot;&gt;&lt;/a&gt;正则表达式的定义&lt;/h2&gt;&lt;p&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合
      
    
    </summary>
    
    
    
      <category term="正则表达式" scheme="http://hezhenyun.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+github搭建免费博客教程</title>
    <link href="http://hezhenyun.github.io/2019/11/16/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://hezhenyun.github.io/2019/11/16/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2019-11-16T07:52:31.118Z</published>
    <updated>2019-11-21T01:13:37.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>使用github pages服务搭建博客的好处有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ 全是静态文件，访问速度快；</span><br><span class="line">$ 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">$ 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line">$ 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">$ 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">$ 等等；</span><br></pre></td></tr></table></figure><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1.准备工作"></a>1.1.准备工作</h3><p>在开始一切之前，你必须已经：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 有一个github账号，没有的话去注册一个；</span><br><span class="line">$ 安装了node.js、npm，并了解相关基础知识；</span><br><span class="line">$ 安装了git <span class="keyword">for</span> windows（或者其它git客户端）</span><br></pre></td></tr></table></figure><h2 id="2-搭建github博客"><a href="#2-搭建github博客" class="headerlink" title="2.搭建github博客"></a>2.搭建github博客</h2><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1.创建仓库"></a>2.1.创建仓库</h3><p>新建一个名为”你的用户名.github.io”的仓库，比如说，如果你的github用户名是test，那么你就新建”test.github.io”的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？<br>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 注册的邮箱一定要验证，否则不会成功；</span><br><span class="line">$ 仓库名字必须是：username.github.io，其中username是你的用户名；</span><br><span class="line">$ 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</span><br></pre></td></tr></table></figure><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><h2 id="3-配置SSH-Key"><a href="#3-配置SSH-Key" class="headerlink" title="3.配置SSH Key"></a>3.配置SSH Key</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址"</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到”.ssh\id_rsa.pub”文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="3-1-测试是否成功"><a href="#3-1-测试是否成功" class="headerlink" title="3.1.测试是否成功"></a>3.1.测试是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi liuxianan! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"liuxianan"</span>// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  <span class="string">"xxx@qq.com"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>具体这个配置是干嘛的我没仔细深究。</p><h2 id="4-hexo的使用和注意事项"><a href="#4-hexo的使用和注意事项" class="headerlink" title="4.hexo的使用和注意事项"></a>4.hexo的使用和注意事项</h2><h3 id="4-1-hexo简介"><a href="#4-1-hexo简介" class="headerlink" title="4.1.hexo简介"></a>4.1.hexo简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h3 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2.原理"></a>4.2.原理</h3><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h3 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3.注意事项"></a>4.3.注意事项</h3><p>安装之前先来说几个注意事项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ 很多命令既可以用Windows的cmd来完成，也可以使用git  </span><br><span class="line">$ bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</span><br><span class="line"><span class="variable">$hexo</span>不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</span><br><span class="line">hexo有2种<span class="string">"_config.yml"</span>文件，一个是根目录下的全局的<span class="string">"_config.yml"</span>，一个是各个theme下的；</span><br></pre></td></tr></table></figure><h3 id="4-4-安装"><a href="#4-4-安装" class="headerlink" title="4.4.安装"></a>4.4.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="4-5-初始化"><a href="#4-5-初始化" class="headerlink" title="4.5.初始化"></a>4.5.初始化</h3><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是”F:\Workspaces\hexo”，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了</p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑</p><h3 id="4-6-上传之前"><a href="#4-6-上传之前" class="headerlink" title="4.6.上传之前"></a>4.6.上传之前</h3><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h3 id="4-7-上传到github"><a href="#4-7-上传到github" class="headerlink" title="4.7.上传到github"></a>4.7.上传到github</h3><p>如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，”ssh key”肯定要配置好。</p><p>其次，配置”_config.yml”中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: github</span><br><span class="line">  repository: https://github.com/liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="4-8-常用hexo命令"><a href="#4-8-常用hexo命令" class="headerlink" title="4.8.常用hexo命令"></a>4.8.常用hexo命令</h3><p>   常见命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><p>   缩写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>   组合命令</p><pre><code class="bash">hexo s -g <span class="comment">#生成并本地预览</span>hexo d -g <span class="comment">#生成并上传</span></code></pre><h2 id="5-最终效果"><a href="#5-最终效果" class="headerlink" title="5.最终效果"></a>5.最终效果</h2><p>可以访问我的git博客来查看效果：<a href="https://hezhenyun.github.io/">https://hezhenyun.github.io/</a></p><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h2><p>博客园：<a href="http://www.cnblogs.com/liuxianan" target="_blank" rel="noopener">http://www.cnblogs.com/liuxianan</a><br>copyright ©2012-2018 小茗同学</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;使用github pages服务搭建博客的好处有：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://hezhenyun.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://hezhenyun.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令基础</title>
    <link href="http://hezhenyun.github.io/2019/11/16/Linux%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/"/>
    <id>http://hezhenyun.github.io/2019/11/16/Linux%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/</id>
    <published>2019-11-16T07:52:26.859Z</published>
    <updated>2019-11-21T01:13:13.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>1 熟悉在Linux操作系统下的基本操作，对Linux操作系统有一个感性认识<br>2 参阅相关Linux的命令参考手册，熟悉Linux下的操作命令。</p><h2 id="1-常用命令基础"><a href="#1-常用命令基础" class="headerlink" title="1.常用命令基础"></a>1.常用命令基础</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ 登录系统：login 用户名称</span><br><span class="line">$ 注销（退出）系统：<span class="built_in">logout</span> </span><br><span class="line">$ 关机命令：shutdown now</span><br><span class="line">$ 使用man命令帮助，例如：man ls（屏幕显示关于ls命令的帮助信息）</span><br><span class="line">$ ls（显示目录内容）</span><br><span class="line">格式：ls  [选项] [目录或是文件]</span><br><span class="line">其中：-a  显示指定目录下所有子目录和文件，包括隐藏文件-l   以长格式来显示文件的详细信息。</span><br><span class="line">-R  递归地显示指定目录的各个子目录中的文件</span><br><span class="line">例如：</span><br><span class="line">使用ls 查看当前目录内容：  $ ls</span><br><span class="line">使用ls 查看指定目录内容： $ ls /etc </span><br><span class="line">使用ls  –al 查看当前目录内容：   <span class="variable">$ls</span> -al</span><br><span class="line">使用dir 查看当前目录内容：  <span class="variable">$dir</span></span><br><span class="line">$ <span class="built_in">cd</span> （改变工作目录）</span><br><span class="line">格式： <span class="built_in">cd</span>   [路径名称]</span><br><span class="line">如：<span class="built_in">cd</span>  ..   回到上层目录  ；<span class="built_in">cd</span>  /   回到根目录</span><br><span class="line">$ <span class="built_in">pwd</span>  （显示当前工作目录的绝对路径）</span><br><span class="line">格式： <span class="built_in">pwd</span> </span><br><span class="line">$ mkdir （创建目录）</span><br><span class="line">格式：mkdir  [目录名称] </span><br><span class="line">例如：  mkdir  /home/s2001/newdir </span><br><span class="line">$ rmdir （删除空目录）</span><br><span class="line">格式：rmdir [选项]  [目录名称]</span><br><span class="line">$ cp （文件或目录的复制） </span><br><span class="line">格式：cp  [选项] 源文件或目录  目标文件或目录</span><br><span class="line">例如： cp  文件名1  文件名2</span><br><span class="line">$ mv  （文件或目录更名或将文件由一个目录移到另一个目录中）</span><br><span class="line">格式：mv  [选项] 源文件或目录 目标文件或目录</span><br><span class="line">$ rm （删除文件或目录）</span><br><span class="line">格式：rm  [选项] 文件名|目录名</span><br><span class="line">$ cat  （显示文件）</span><br><span class="line">格式：cat  [选项] 文件列表</span><br><span class="line">例如：cat 文件名   </span><br><span class="line">$ cat命令也可用来建立新文件：cat &gt;文件名，ctrl+d结束输入</span><br></pre></td></tr></table></figure><h2 id="2-学习Linux辅助软件介绍"><a href="#2-学习Linux辅助软件介绍" class="headerlink" title="2.学习Linux辅助软件介绍"></a>2.学习Linux辅助软件介绍</h2><p>虚拟机 Vmware，VirtualPC和Bochs等。<br>Linux源代码阅读工具 Source Insight</p><p>源码阅读网站 <a href="http://lxr.linux.no" target="_blank" rel="noopener">http://lxr.linux.no</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;1 熟悉在Linux操作系统下的基本操作，对Linux操作系统有一个感性认识&lt;br&gt;2 参阅相关Linux的命令参考手册，熟悉Linux下的
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://hezhenyun.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mysql命令基础大全</title>
    <link href="http://hezhenyun.github.io/2019/11/15/mysql%E5%91%BD%E4%BB%A4/"/>
    <id>http://hezhenyun.github.io/2019/11/15/mysql%E5%91%BD%E4%BB%A4/</id>
    <published>2019-11-15T07:14:54.974Z</published>
    <updated>2019-11-21T01:12:54.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需知"><a href="#需知" class="headerlink" title="需知"></a>需知</h2><p>以下是整理的一些基础的Mysql的命令<br>如果还需要深层的探索可以转接此地址<a href="https://www.mysql.com" target="_blank" rel="noopener">Mysql官网</a></p><h2 id="Mysql命令锦集"><a href="#Mysql命令锦集" class="headerlink" title="Mysql命令锦集"></a>Mysql命令锦集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">　mysql -h主机地址 -u用户名 －p密码 连接MYSQL;如果刚安装好MYSQL，超级用户root是没有密码的。</span><br><span class="line">　　（例：mysql -h110.110.110.110 -Uroot -P123456</span><br><span class="line">　　注:u与root可以不用加空格，其它也一样）</span><br><span class="line">　　<span class="built_in">exit</span> 退出MYSQL</span><br><span class="line">　　mysqladmin -u用户名 -p旧密码 password 新密码 修改密码</span><br><span class="line">　　grant select on 数据库.* to 用户名@登录主机 identified by <span class="string">"密码"</span>; 增加新用户。（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）</span><br><span class="line">　　show databases; 显示数据库列表。刚开始时才两个数据库：mysql和<span class="built_in">test</span>。mysql库很重要它里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</span><br><span class="line">　　use mysql；</span><br><span class="line">　　show tables; 显示库中的数据表</span><br><span class="line">　　describe 表名; 显示数据表的结构</span><br><span class="line">　　create database 库名; 建库</span><br><span class="line">　　use 库名；</span><br><span class="line">　　create table 表名 (字段设定列表)； 建表</span><br><span class="line">　　drop database 库名;</span><br><span class="line">　　drop table 表名； 删库和删表</span><br><span class="line">　　delete from 表名; 将表中记录清空</span><br><span class="line">　　select * from 表名; 显示表中的记录</span><br><span class="line">　　mysqldump --opt school&gt;school.bbb 备份数据库：（命令在DOS的mysqlin目录下执行）;注释:将数据库school备份到school.bbb文件，school.bbb是一个文本文件，文件名任取，打开看看你会有新发现。</span><br><span class="line">　　win2003系统下新增命令（实用部份）：</span><br><span class="line">　　shutdown /参数 关闭或重启本地或远程主机。</span><br><span class="line">　　参数说明：/S 关闭主机，/R 重启主机， /T 数字 设定延时的时间，范围0～180秒之间， /A取消开机，/M //IP 指定的远程主机。</span><br><span class="line">　　例：shutdown /r /t 0 立即重启本地主机（无延时）</span><br><span class="line">　　taskill /参数 进程名或进程的pid 终止一个或多个任务和进程。</span><br><span class="line">　　参数说明：/PID 要终止进程的pid,可用tasklist命令获得各进程的pid，/IM 要终止的进程的进程名，/F 强制终止进程，/T 终止指定的进程及他所启动的子进程。</span><br><span class="line">　　tasklist 显示当前运行在本地和远程主机上的进程、服务、服务各进程的进程标识符(PID)。</span><br><span class="line">　　参数说明：/M 列出当前进程加载的dll文件，/SVC 显示出每个进程对应的服务，无参数时就只列出当前的进程。</span><br><span class="line">　　Linux系统下基本命令　注：要区分大小写</span><br><span class="line">　　uname 显示版本信息（同win2K的 ver）</span><br><span class="line">　　dir 显示当前目录文件,ls -al 显示包括隐藏文件（同win2K的 dir）</span><br><span class="line">　　<span class="built_in">pwd</span> 查询当前所在的目录位置</span><br><span class="line">　　<span class="built_in">cd</span> <span class="built_in">cd</span>　..回到上一层目录，注意<span class="built_in">cd</span> 与..之间有空格。<span class="built_in">cd</span>　/返回到根目录。</span><br><span class="line">　　cat 文件名 查看文件内容</span><br><span class="line">　　cat &gt;abc.txt 往abc.txt文件中写上内容。</span><br><span class="line">　　more 文件名 以一页一页的方式显示一个文本文件。</span><br><span class="line">　　cp 复制文件</span><br><span class="line">　　mv 移动文件</span><br><span class="line">　　rm 文件名 删除文件，rm -a 目录名删除目录及子目录</span><br><span class="line">　　mkdir 目录名 建立目录</span><br><span class="line">　　rmdir 删除子目录，目录内没有文档。</span><br><span class="line">　　chmod 设定档案或目录的存取权限</span><br><span class="line">　　grep 在档案中查找字符串</span><br><span class="line">　　diff 档案文件比较</span><br><span class="line">　　find 档案搜寻</span><br><span class="line">　　date 现在的日期、时间</span><br><span class="line">　　who 查询目前和你使用同一台机器的人以及Login时间地点</span><br><span class="line">　　w 查询目前上机者的详细资料</span><br><span class="line">　　whoami 查看自己的帐号名称</span><br><span class="line">　　groups 查看某人的Group</span><br><span class="line">　　passwd 更改密码</span><br><span class="line">　　<span class="built_in">history</span> 查看自己下过的命令</span><br><span class="line">　　ps 显示进程状态</span><br><span class="line">　　<span class="built_in">kill</span> 停止某进程</span><br><span class="line">　　gcc 黑客通常用它来编译C语言写的文件</span><br><span class="line">　　su 权限转换为指定使用者</span><br><span class="line">　　telnet IP telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。</span><br><span class="line">　　ftp ftp连接上某服务器（同win2K）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需知&quot;&gt;&lt;a href=&quot;#需知&quot; class=&quot;headerlink&quot; title=&quot;需知&quot;&gt;&lt;/a&gt;需知&lt;/h2&gt;&lt;p&gt;以下是整理的一些基础的Mysql的命令&lt;br&gt;如果还需要深层的探索可以转接此地址&lt;a href=&quot;https://www.mysql.com
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="http://hezhenyun.github.io/tags/Mysql/"/>
    
      <category term="命令" scheme="http://hezhenyun.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Windows CMD命令大全</title>
    <link href="http://hezhenyun.github.io/2019/11/15/cmd%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://hezhenyun.github.io/2019/11/15/cmd%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2019-11-15T07:14:54.967Z</published>
    <updated>2019-11-21T01:13:57.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h2><p>cmd是command的缩写.即命令行 。</p><p>虽然随着计算机产业的发展，Windows 操作系统的应用越来越广泛，DOS 面临着被淘汰的命运，但是因为它运行安全、稳定，有的用户还在使用，所以一般Windows 的各种版本都与其兼容，用户可以在Windows 系统下运行DOS，中文版Windows XP 中的命令提示符进一步提高了与DOS 下操作命令的兼容性，用户可以在命令提示符直接输入中文调用文件。</p><p>　　在9x系统下输入command就可以打开命令行.而在NT系统上可以输入cmd来打开，在windows2003后被cmd替代，利用CMD命令查询系统的信息或者是判断网络的好坏。</p><h2 id="运行操作"><a href="#运行操作" class="headerlink" title="运行操作"></a>运行操作</h2><h3 id="CMD命令：开始－-gt-运行－-gt-键入cmd或command-在命令行里可以看到系统版本、文件系统版本"><a href="#CMD命令：开始－-gt-运行－-gt-键入cmd或command-在命令行里可以看到系统版本、文件系统版本" class="headerlink" title="CMD命令：开始－&gt;运行－&gt;键入cmd或command(在命令行里可以看到系统版本、文件系统版本)"></a>CMD命令：开始－&gt;运行－&gt;键入cmd或command(在命令行里可以看到系统版本、文件系统版本)</h3><h2 id="CMD命令锦集"><a href="#CMD命令锦集" class="headerlink" title="CMD命令锦集"></a>CMD命令锦集</h2><pre><code class="bash">1. gpedit.msc-----组策略　　2. sndrec32-------录音机　　3. Nslookup-------IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。　　4. explorer-------打开资源管理器　　5. logoff---------注销命令　　6. shutdown-------60秒倒计时关机命令　　7. lusrmgr.msc----本机用户和组　　8. services.msc---本地服务设置　　9. oobe/msoobe /a----检查XP是否激活　　10. notepad--------打开记事本　　11. cleanmgr-------垃圾整理　　12. net start messenger----开始信使服务　　13. compmgmt.msc---计算机管理　　14. net stop messenger-----停止信使服务　　15. conf-----------启动netmeeting　　16. dvdplay--------DVD播放器　　17. charmap--------启动字符映射表　　18. diskmgmt.msc---磁盘管理实用程序　　19. calc-----------启动计算器　　20. dfrg.msc-------磁盘碎片整理程序　　21. chkdsk.exe-----Chkdsk磁盘检查　　22. devmgmt.msc--- 设备管理器　　23. regsvr32 /u *.dll----停止dll文件运行　　24. drwtsn32------ 系统医生　　25. rononce -p----15秒关机　　26. dxdiag---------检查DirectX信息　　27. regedt32-------注册表编辑器　　28. Msconfig.exe---系统配置实用程序　　29. rsop.msc-------组策略结果集　　30. mem.exe--------显示内存使用情况　　31. regedit.exe----注册表　　32. winchat--------XP自带局域网聊天　　33. progman--------程序管理器　　34. winmsd---------系统信息　　35. perfmon.msc----计算机性能监测程序　　36. winver---------检查Windows版本　　37. sfc /scannow-----扫描错误并复原　　38. taskmgr-----任务管理器（2000/xp/2003　　40. wmimgmt.msc----打开windows管理体系结构(WMI)　　41. wupdmgr--------windows更新程序　　42. wscript--------windows脚本宿主设置　　43. write----------写字板　　45. wiaacmgr-------扫描仪和照相机向导　　46. winchat--------XP自带局域网聊天　　49. mplayer2-------简易widnows media player　　50. mspaint--------画图板　　51. mstsc----------远程桌面连接　　53. magnify--------放大镜实用程序　　54. mmc------------打开控制台　　55. mobsync--------同步命令　　57. iexpress-------木马捆绑工具，系统自带　　58. fsmgmt.msc-----共享文件夹管理器　　59. utilman--------辅助工具管理器　　61. dcomcnfg-------打开系统组件服务　　62. ddeshare-------打开DDE共享设置　　110. osk------------打开屏幕键盘　　111. odbcad32-------ODBC数据源管理器　　112. oobe/msoobe /a----检查XP是否激活　　68. ntbackup-------系统备份和还原　　69. narrator-------屏幕“讲述人”　　70. ntmsmgr.msc----移动存储管理器　　71. ntmsoprq.msc---移动存储管理员操作请求　　72. netstat -an----(TC)命令检查接口　　73. syncapp--------创建一个公文包　　74. sysedit--------系统配置编辑器　　75. sigverif-------文件签名验证程序　　76. ciadv.msc------索引服务程序　　77. shrpubw--------创建共享文件夹　　78. secpol.msc-----本地安全策略　　79. syskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码　　80. services.msc---本地服务设置　　81. Sndvol32-------音量控制程序　　82. sfc.exe--------系统文件检查器　　83. sfc /scannow---windows文件保护　　84. ciadv.msc------索引服务程序　　85. tourstart------xp简介（安装完成后出现的漫游xp程序）　　86. taskmgr--------任务管理器　　87. eventvwr-------事件查看器　　88. eudcedit-------造字程序　　89. compmgmt.msc---计算机管理　　90. packager-------对象包装程序　　91. perfmon.msc----计算机性能监测程序　　92. charmap--------启动字符映射表　　93. cliconfg-------SQL SERVER 客户端网络实用程序　　94. Clipbrd--------剪贴板查看器　　95. conf-----------启动netmeeting　　96. certmgr.msc----证书管理实用程序　　97. regsvr32 /u *.dll----停止dll文件运行　　98. regsvr32 /u zipfldr.dll------取消ZIP支持　　99. cmd.exe--------CMD命令提示符</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令简介&quot;&gt;&lt;a href=&quot;#命令简介&quot; class=&quot;headerlink&quot; title=&quot;命令简介&quot;&gt;&lt;/a&gt;命令简介&lt;/h2&gt;&lt;p&gt;cmd是command的缩写.即命令行 。&lt;/p&gt;
&lt;p&gt;虽然随着计算机产业的发展，Windows 操作系统的应用越来越广泛
      
    
    </summary>
    
    
    
      <category term="Windows" scheme="http://hezhenyun.github.io/tags/Windows/"/>
    
      <category term="CMD" scheme="http://hezhenyun.github.io/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hezhenyun.github.io/2019/11/15/hello-world/"/>
    <id>http://hezhenyun.github.io/2019/11/15/hello-world/</id>
    <published>2019-11-15T02:57:43.525Z</published>
    <updated>2019-11-21T01:14:39.142Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你好,欢迎来到我的博客</title>
    <link href="http://hezhenyun.github.io/2019/10/14/%E4%BD%A0%E5%A5%BD-Hexo/"/>
    <id>http://hezhenyun.github.io/2019/10/14/%E4%BD%A0%E5%A5%BD-Hexo/</id>
    <published>2019-10-14T06:48:00.000Z</published>
    <updated>2019-11-21T01:14:59.966Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
